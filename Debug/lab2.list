
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b4  080061b4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080061b4  080061b4  000161b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061bc  080061bc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080061c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00013060  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200130c0  200130c0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011dbf  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b22  00000000  00000000  00031e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010b8  00000000  00000000  000349b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d06  00000000  00000000  00035a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002245d  00000000  00000000  00036776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013d81  00000000  00000000  00058bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d299f  00000000  00000000  0006c954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ba0  00000000  00000000  0013f2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00143e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800606c 	.word	0x0800606c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800606c 	.word	0x0800606c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fc1b 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f843 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8d5 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f8a9 	bl	80006e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(Red_LED_App, "Red_LED", 1000, NULL, 1,  NULL);
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a0:	4913      	ldr	r1, [pc, #76]	; (80005f0 <main+0x74>)
 80005a2:	4814      	ldr	r0, [pc, #80]	; (80005f4 <main+0x78>)
 80005a4:	f002 ff98 	bl	80034d8 <xTaskCreate>
  xTaskCreate(Green_LED_App, "Green_LED", 1000, NULL, 1,  NULL);
 80005a8:	2300      	movs	r3, #0
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	2301      	movs	r3, #1
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b6:	4910      	ldr	r1, [pc, #64]	; (80005f8 <main+0x7c>)
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0x80>)
 80005ba:	f002 ff8d 	bl	80034d8 <xTaskCreate>
  xTaskCreate(Delay_App, "Delay", 1000, NULL, 14,  NULL);
 80005be:	2300      	movs	r3, #0
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	230e      	movs	r3, #14
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <main+0x84>)
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x88>)
 80005d0:	f002 ff82 	bl	80034d8 <xTaskCreate>
  xTaskCreate(TaskMonitor_App, "TaskMonitor", 1000, NULL, 3,  NULL);
 80005d4:	2300      	movs	r3, #0
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2303      	movs	r3, #3
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2300      	movs	r3, #0
 80005de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e2:	4909      	ldr	r1, [pc, #36]	; (8000608 <main+0x8c>)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x90>)
 80005e6:	f002 ff77 	bl	80034d8 <xTaskCreate>
  vTaskStartScheduler();
 80005ea:	f003 f8e7 	bl	80037bc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x72>
 80005f0:	08006084 	.word	0x08006084
 80005f4:	08000a0d 	.word	0x08000a0d
 80005f8:	0800608c 	.word	0x0800608c
 80005fc:	08000a39 	.word	0x08000a39
 8000600:	08006098 	.word	0x08006098
 8000604:	08000a65 	.word	0x08000a65
 8000608:	080060a0 	.word	0x080060a0
 800060c:	080009f5 	.word	0x080009f5

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f005 f897 	bl	8005752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000688:	2304      	movs	r3, #4
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068c:	2307      	movs	r3, #7
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fe85 	bl	80013a4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 fa08 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f8e6 	bl	8001894 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f9f1 	bl	8000ab4 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 fdba 	bl	8002294 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f9c5 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000007c 	.word	0x2000007c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4ba2      	ldr	r3, [pc, #648]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4aa1      	ldr	r2, [pc, #644]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b9f      	ldr	r3, [pc, #636]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b9b      	ldr	r3, [pc, #620]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a9a      	ldr	r2, [pc, #616]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b98      	ldr	r3, [pc, #608]	; (80009dc <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b94      	ldr	r3, [pc, #592]	; (80009dc <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a93      	ldr	r2, [pc, #588]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b91      	ldr	r3, [pc, #580]	; (80009dc <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b8d      	ldr	r3, [pc, #564]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a8c      	ldr	r2, [pc, #560]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b8a      	ldr	r3, [pc, #552]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b86      	ldr	r3, [pc, #536]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a85      	ldr	r2, [pc, #532]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b7f      	ldr	r3, [pc, #508]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a7e      	ldr	r2, [pc, #504]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b7c      	ldr	r3, [pc, #496]	; (80009dc <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2108      	movs	r1, #8
 80007fa:	4879      	ldr	r0, [pc, #484]	; (80009e0 <MX_GPIO_Init+0x2a8>)
 80007fc:	f000 fd9e 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	4877      	ldr	r0, [pc, #476]	; (80009e4 <MX_GPIO_Init+0x2ac>)
 8000806:	f000 fd99 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 800080a:	2200      	movs	r2, #0
 800080c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000810:	4875      	ldr	r0, [pc, #468]	; (80009e8 <MX_GPIO_Init+0x2b0>)
 8000812:	f000 fd93 	bl	800133c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000816:	2308      	movs	r3, #8
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	486c      	ldr	r0, [pc, #432]	; (80009e0 <MX_GPIO_Init+0x2a8>)
 800082e:	f000 fbe9 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4866      	ldr	r0, [pc, #408]	; (80009e4 <MX_GPIO_Init+0x2ac>)
 800084a:	f000 fbdb 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085e:	2305      	movs	r3, #5
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	485e      	ldr	r0, [pc, #376]	; (80009e4 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fbcb 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	485a      	ldr	r0, [pc, #360]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000884:	f000 fbbe 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000888:	2310      	movs	r3, #16
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000898:	2306      	movs	r3, #6
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4852      	ldr	r0, [pc, #328]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80008a4:	f000 fbae 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a8:	23e0      	movs	r3, #224	; 0xe0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b8:	2305      	movs	r3, #5
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	484a      	ldr	r0, [pc, #296]	; (80009ec <MX_GPIO_Init+0x2b4>)
 80008c4:	f000 fb9e 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c8:	2304      	movs	r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4845      	ldr	r0, [pc, #276]	; (80009f0 <MX_GPIO_Init+0x2b8>)
 80008dc:	f000 fb92 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	483c      	ldr	r0, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x2b8>)
 80008fe:	f000 fb81 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000902:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000906:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4833      	ldr	r0, [pc, #204]	; (80009e8 <MX_GPIO_Init+0x2b0>)
 800091c:	f000 fb72 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000920:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000932:	2306      	movs	r3, #6
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4829      	ldr	r0, [pc, #164]	; (80009e4 <MX_GPIO_Init+0x2ac>)
 800093e:	f000 fb61 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4825      	ldr	r0, [pc, #148]	; (80009ec <MX_GPIO_Init+0x2b4>)
 8000958:	f000 fb54 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800095c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096e:	230a      	movs	r3, #10
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_GPIO_Init+0x2b4>)
 800097a:	f000 fb43 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097e:	2320      	movs	r3, #32
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4815      	ldr	r0, [pc, #84]	; (80009e8 <MX_GPIO_Init+0x2b0>)
 8000992:	f000 fb37 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000996:	f44f 7310 	mov.w	r3, #576	; 0x240
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a8:	2304      	movs	r3, #4
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <MX_GPIO_Init+0x2b8>)
 80009b4:	f000 fb26 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0x2a8>)
 80009ce:	f000 fb19 	bl	8001004 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400

080009f4 <TaskMonitor_App>:

/* USER CODE BEGIN 4 */
void TaskMonitor_App(void *pvParameters){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	for(;;){
		Taskmonitor();
 80009fc:	f003 fd8e 	bl	800451c <Taskmonitor>
		vTaskDelay(1000);
 8000a00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a04:	f002 fea6 	bl	8003754 <vTaskDelay>
		Taskmonitor();
 8000a08:	e7f8      	b.n	80009fc <TaskMonitor_App+0x8>
	...

08000a0c <Red_LED_App>:
	}
}

void Red_LED_App(void *pvParameters){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 8000a14:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a18:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <Red_LED_App+0x28>)
 8000a20:	f000 fca5 	bl	800136e <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f002 fe95 	bl	8003754 <vTaskDelay>
		Redtimer+=1;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000a30:	e7f3      	b.n	8000a1a <Red_LED_App+0xe>
 8000a32:	bf00      	nop
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <Green_LED_App+0x28>)
 8000a4c:	f000 fc8f 	bl	800136e <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f002 fe7f 	bl	8003754 <vTaskDelay>
		Greentimer+=2;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000a5c:	e7f3      	b.n	8000a46 <Green_LED_App+0xe>
 8000a5e:	bf00      	nop
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <Delay_App>:
	}
}

void Delay_App(void *pvParameters){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d105      	bne.n	8000a82 <Delay_App+0x1e>
			delaytime = 1000;
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	60bb      	str	r3, [r7, #8]
			delayflag=1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e002      	b.n	8000a88 <Delay_App+0x24>
		}else{
			delaytime=0xFFFFFFFF;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a86:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 8000a88:	68b8      	ldr	r0, [r7, #8]
 8000a8a:	f002 fe63 	bl	8003754 <vTaskDelay>
		if(delayflag==0){
 8000a8e:	e7ef      	b.n	8000a70 <Delay_App+0xc>

08000a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f000 f9ad 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40001400 	.word	0x40001400

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b86:	f000 fa3d 	bl	8001004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <HAL_InitTick+0xe4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a32      	ldr	r2, [pc, #200]	; (8000c84 <HAL_InitTick+0xe4>)
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <HAL_InitTick+0xe4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	f107 0210 	add.w	r2, r7, #16
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f87c 	bl	8001cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be6:	f001 f84d 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8000bea:	6378      	str	r0, [r7, #52]	; 0x34
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bee:	f001 f849 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_InitTick+0xe8>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	0c9b      	lsrs	r3, r3, #18
 8000c02:	3b01      	subs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_InitTick+0xec>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <HAL_InitTick+0xf0>)
 8000c0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_InitTick+0xec>)
 8000c0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c12:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <HAL_InitTick+0xec>)
 8000c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c18:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_InitTick+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <HAL_InitTick+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_InitTick+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c2c:	4817      	ldr	r0, [pc, #92]	; (8000c8c <HAL_InitTick+0xec>)
 8000c2e:	f001 f883 	bl	8001d38 <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11b      	bne.n	8000c78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <HAL_InitTick+0xec>)
 8000c42:	f001 f8d3 	bl	8001dec <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d111      	bne.n	8000c78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c54:	2037      	movs	r0, #55	; 0x37
 8000c56:	f000 f9c7 	bl	8000fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d808      	bhi.n	8000c72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2037      	movs	r0, #55	; 0x37
 8000c66:	f000 f9a3 	bl	8000fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_InitTick+0xf4>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e002      	b.n	8000c78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3738      	adds	r7, #56	; 0x38
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	431bde83 	.word	0x431bde83
 8000c8c:	200000c0 	.word	0x200000c0
 8000c90:	40001400 	.word	0x40001400
 8000c94:	20000004 	.word	0x20000004

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM7_IRQHandler+0x10>)
 8000cca:	f001 f8ff 	bl	8001ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000c0 	.word	0x200000c0

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f004 fd2c 	bl	8005764 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20020000 	.word	0x20020000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000108 	.word	0x20000108
 8000d40:	200130c0 	.word	0x200130c0

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6e:	490e      	ldr	r1, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d84:	4c0b      	ldr	r4, [pc, #44]	; (8000db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d92:	f7ff ffd7 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f004 fceb 	bl	8005770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fbef 	bl	800057c <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dac:	080061c4 	.word	0x080061c4
  ldr r2, =_sbss
 8000db0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000db4:	200130c0 	.word	0x200130c0

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f8d8 	bl	8000f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fed8 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fe66 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	2000010c 	.word	0x2000010c

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000010c 	.word	0x2000010c

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4907      	ldr	r1, [pc, #28]	; (8000edc <__NVIC_EnableIRQ+0x38>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff4c 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc2:	f7ff ff61 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	6978      	ldr	r0, [r7, #20]
 8000fce:	f7ff ffb1 	bl	8000f34 <NVIC_EncodePriority>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff80 	bl	8000ee0 <__NVIC_SetPriority>
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff54 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e16b      	b.n	80012f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 815a 	bne.w	80012f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80b4 	beq.w	80012f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b60      	ldr	r3, [pc, #384]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_GPIO_Init+0x30c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a5b      	ldr	r2, [pc, #364]	; (8001314 <HAL_GPIO_Init+0x310>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a52      	ldr	r2, [pc, #328]	; (8001318 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x226>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x222>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x21e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x324>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x328>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x32c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x330>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x20a>
 800120a:	2307      	movs	r3, #7
 800120c:	e00e      	b.n	800122c <HAL_GPIO_Init+0x228>
 800120e:	2308      	movs	r3, #8
 8001210:	e00c      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001212:	2306      	movs	r3, #6
 8001214:	e00a      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001216:	2305      	movs	r3, #5
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121a:	2304      	movs	r3, #4
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x228>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x228>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x228>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4935      	ldr	r1, [pc, #212]	; (8001314 <HAL_GPIO_Init+0x310>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_GPIO_Init+0x334>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126e:	4a32      	ldr	r2, [pc, #200]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_GPIO_Init+0x334>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001298:	4a27      	ldr	r2, [pc, #156]	; (8001338 <HAL_GPIO_Init+0x334>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_GPIO_Init+0x334>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f ae90 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021000 	.word	0x40021000
 800132c:	40021400 	.word	0x40021400
 8001330:	40021800 	.word	0x40021800
 8001334:	40021c00 	.word	0x40021c00
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001380:	887a      	ldrh	r2, [r7, #2]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	041a      	lsls	r2, r3, #16
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43d9      	mvns	r1, r3
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	400b      	ands	r3, r1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e267      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d075      	beq.n	80014ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c2:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d00c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d112      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013da:	4b82      	ldr	r3, [pc, #520]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013e6:	d10b      	bne.n	8001400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d05b      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d157      	bne.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e242      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d106      	bne.n	8001418 <HAL_RCC_OscConfig+0x74>
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a75      	ldr	r2, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0x98>
 8001422:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6f      	ldr	r2, [pc, #444]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6d      	ldr	r3, [pc, #436]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6c      	ldr	r2, [pc, #432]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xb0>
 800143c:	4b69      	ldr	r3, [pc, #420]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a68      	ldr	r2, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fce4 	bl	8000e28 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fce0 	bl	8000e28 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e207      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xc0>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fcd0 	bl	8000e28 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fccc 	bl	8000e28 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1f3      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ba:	4b4a      	ldr	r3, [pc, #296]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014c6:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c7      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <HAL_RCC_OscConfig+0x244>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fc85 	bl	8000e28 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc81 	bl	8000e28 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a8      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4925      	ldr	r1, [pc, #148]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x244>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fc64 	bl	8000e28 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fc60 	bl	8000e28 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e187      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d036      	beq.n	80015fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_RCC_OscConfig+0x248>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fc44 	bl	8000e28 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc40 	bl	8000e28 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e167      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_OscConfig+0x240>)
 80015b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x200>
 80015c2:	e01b      	b.n	80015fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x248>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fc2d 	bl	8000e28 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e00e      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d2:	f7ff fc29 	bl	8000e28 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d907      	bls.n	80015f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e150      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470000 	.word	0x42470000
 80015ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	4b88      	ldr	r3, [pc, #544]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ea      	bne.n	80015d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8097 	beq.w	8001738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b81      	ldr	r3, [pc, #516]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10f      	bne.n	800163a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a7c      	ldr	r2, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d118      	bne.n	8001678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001646:	4b74      	ldr	r3, [pc, #464]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a73      	ldr	r2, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff fbe9 	bl	8000e28 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7ff fbe5 	bl	8000e28 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e10c      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x474>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x2ea>
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x324>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b05      	cmp	r3, #5
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x30c>
 8001696:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a5e      	ldr	r2, [pc, #376]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a5b      	ldr	r2, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	e00b      	b.n	80016c8 <HAL_RCC_OscConfig+0x324>
 80016b0:	4b58      	ldr	r3, [pc, #352]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	4a57      	ldr	r2, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	4a54      	ldr	r2, [pc, #336]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d015      	beq.n	80016fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fbaa 	bl	8000e28 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fba6 	bl	8000e28 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0cb      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0ee      	beq.n	80016d8 <HAL_RCC_OscConfig+0x334>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fb94 	bl	8000e28 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fb90 	bl	8000e28 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0b5      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171a:	4b3e      	ldr	r3, [pc, #248]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ee      	bne.n	8001704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b39      	ldr	r3, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4a38      	ldr	r2, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80a1 	beq.w	8001884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b08      	cmp	r3, #8
 800174c:	d05c      	beq.n	8001808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d141      	bne.n	80017da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x478>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fb64 	bl	8000e28 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fb60 	bl	8000e28 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e087      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	019b      	lsls	r3, r3, #6
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	3b01      	subs	r3, #1
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	491b      	ldr	r1, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x478>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb39 	bl	8000e28 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb35 	bl	8000e28 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e05c      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x416>
 80017d8:	e054      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb22 	bl	8000e28 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb1e 	bl	8000e28 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e045      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x444>
 8001806:	e03d      	b.n	8001884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e038      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
 800181c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <HAL_RCC_OscConfig+0x4ec>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d028      	beq.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d121      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d11a      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	4293      	cmp	r3, r2
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0cc      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d90c      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d044      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d119      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	2b03      	cmp	r3, #3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e067      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 0203 	bic.w	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4934      	ldr	r1, [pc, #208]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001984:	f7ff fa50 	bl	8000e28 <HAL_GetTick>
 8001988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff fa4c 	bl	8000e28 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e04f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 020c 	and.w	r2, r3, #12
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1eb      	bne.n	800198c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d20c      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f8b0 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08006144 	.word	0x08006144
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a64:	b094      	sub	sp, #80	; 0x50
 8001a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a70:	2300      	movs	r3, #0
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a78:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d00d      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	f200 80e1 	bhi.w	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x34>
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a92:	e0db      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b73      	ldr	r3, [pc, #460]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a98:	e0db      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a9e:	e0d8      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ab6:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	2200      	movs	r2, #0
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	0159      	lsls	r1, r3, #5
 8001ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae4:	0150      	lsls	r0, r2, #5
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4621      	mov	r1, r4
 8001aec:	1a51      	subs	r1, r2, r1
 8001aee:	6139      	str	r1, [r7, #16]
 8001af0:	4629      	mov	r1, r5
 8001af2:	eb63 0301 	sbc.w	r3, r3, r1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b04:	4659      	mov	r1, fp
 8001b06:	018b      	lsls	r3, r1, #6
 8001b08:	4651      	mov	r1, sl
 8001b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b0e:	4651      	mov	r1, sl
 8001b10:	018a      	lsls	r2, r1, #6
 8001b12:	4651      	mov	r1, sl
 8001b14:	ebb2 0801 	subs.w	r8, r2, r1
 8001b18:	4659      	mov	r1, fp
 8001b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b32:	4690      	mov	r8, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	eb18 0303 	adds.w	r3, r8, r3
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	462b      	mov	r3, r5
 8001b40:	eb49 0303 	adc.w	r3, r9, r3
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b52:	4629      	mov	r1, r5
 8001b54:	024b      	lsls	r3, r1, #9
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	024a      	lsls	r2, r1, #9
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b66:	2200      	movs	r2, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b70:	f7fe fb86 	bl	8000280 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b7c:	e058      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	099b      	lsrs	r3, r3, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	4611      	mov	r1, r2
 8001b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b98:	4642      	mov	r2, r8
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0159      	lsls	r1, r3, #5
 8001ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001baa:	0150      	lsls	r0, r2, #5
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4641      	mov	r1, r8
 8001bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	00eb      	lsls	r3, r5, #3
 8001be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be6:	00e2      	lsls	r2, r4, #3
 8001be8:	4614      	mov	r4, r2
 8001bea:	461d      	mov	r5, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	18e3      	adds	r3, r4, r3
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	464b      	mov	r3, r9
 8001bf4:	eb45 0303 	adc.w	r3, r5, r3
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c06:	4629      	mov	r1, r5
 8001c08:	028b      	lsls	r3, r1, #10
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c10:	4621      	mov	r1, r4
 8001c12:	028a      	lsls	r2, r1, #10
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	61fa      	str	r2, [r7, #28]
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	f7fe fb2c 	bl	8000280 <__aeabi_uldivmod>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c4a:	e002      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3750      	adds	r7, #80	; 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0a9b      	lsrs	r3, r3, #10
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08006154 	.word	0x08006154

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb0:	f7ff ffdc 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0b5b      	lsrs	r3, r3, #13
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08006154 	.word	0x08006154

08001cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	08db      	lsrs	r3, r3, #3
 8001d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCC_GetClockConfig+0x60>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0207 	and.w	r2, r3, #7
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e041      	b.n	8001dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f839 	bl	8001dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f9d8 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e04e      	b.n	8001ea2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d022      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d01d      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d018      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d013      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00e      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a19      	ldr	r2, [pc, #100]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x80>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d010      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000800 	.word	0x40000800
 8001ebc:	40000c00 	.word	0x40000c00
 8001ec0:	40010400 	.word	0x40010400
 8001ec4:	40014000 	.word	0x40014000
 8001ec8:	40001800 	.word	0x40001800

08001ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d122      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d11b      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0202 	mvn.w	r2, #2
 8001ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8ee 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8e0 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8f1 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0204 	mvn.w	r2, #4
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8c4 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8b6 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8c7 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0208 	mvn.w	r2, #8
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89a 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f88c 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f89d 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b10      	cmp	r3, #16
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0210 	mvn.w	r2, #16
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f870 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f862 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f873 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fd20 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b80      	cmp	r3, #128	; 0x80
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002068:	2b80      	cmp	r3, #128	; 0x80
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f902 	bl	8002280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002094:	2b40      	cmp	r3, #64	; 0x40
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f838 	bl	8002118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0220 	mvn.w	r2, #32
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8cc 	bl	800226c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a40      	ldr	r2, [pc, #256]	; (8002240 <TIM_Base_SetConfig+0x114>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d00f      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3d      	ldr	r2, [pc, #244]	; (8002244 <TIM_Base_SetConfig+0x118>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <TIM_Base_SetConfig+0x11c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3b      	ldr	r2, [pc, #236]	; (800224c <TIM_Base_SetConfig+0x120>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3a      	ldr	r2, [pc, #232]	; (8002250 <TIM_Base_SetConfig+0x124>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <TIM_Base_SetConfig+0x114>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d027      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <TIM_Base_SetConfig+0x118>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d023      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <TIM_Base_SetConfig+0x11c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2a      	ldr	r2, [pc, #168]	; (800224c <TIM_Base_SetConfig+0x120>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a29      	ldr	r2, [pc, #164]	; (8002250 <TIM_Base_SetConfig+0x124>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d017      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <TIM_Base_SetConfig+0x128>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <TIM_Base_SetConfig+0x12c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a26      	ldr	r2, [pc, #152]	; (800225c <TIM_Base_SetConfig+0x130>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <TIM_Base_SetConfig+0x134>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <TIM_Base_SetConfig+0x138>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d003      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a23      	ldr	r2, [pc, #140]	; (8002268 <TIM_Base_SetConfig+0x13c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <TIM_Base_SetConfig+0x114>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0xf8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <TIM_Base_SetConfig+0x124>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	615a      	str	r2, [r3, #20]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40010000 	.word	0x40010000
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800
 800224c:	40000c00 	.word	0x40000c00
 8002250:	40010400 	.word	0x40010400
 8002254:	40014000 	.word	0x40014000
 8002258:	40014400 	.word	0x40014400
 800225c:	40014800 	.word	0x40014800
 8002260:	40001800 	.word	0x40001800
 8002264:	40001c00 	.word	0x40001c00
 8002268:	40002000 	.word	0x40002000

0800226c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e03f      	b.n	8002326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fc28 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f929 	bl	8002530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800230c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	; 0x28
 8002332:	af02      	add	r7, sp, #8
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b20      	cmp	r3, #32
 800234c:	d17c      	bne.n	8002448 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <HAL_UART_Transmit+0x2c>
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e075      	b.n	800244a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_UART_Transmit+0x3e>
 8002368:	2302      	movs	r3, #2
 800236a:	e06e      	b.n	800244a <HAL_UART_Transmit+0x11c>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2221      	movs	r2, #33	; 0x21
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002382:	f7fe fd51 	bl	8000e28 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d108      	bne.n	80023b0 <HAL_UART_Transmit+0x82>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c0:	e02a      	b.n	8002418 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f840 	bl	8002452 <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e036      	b.n	800244a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3302      	adds	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e007      	b.n	800240a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1cf      	bne.n	80023c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2200      	movs	r2, #0
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f810 	bl	8002452 <UART_WaitOnFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e006      	b.n	800244a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b090      	sub	sp, #64	; 0x40
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002462:	e050      	b.n	8002506 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246a:	d04c      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800246c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <UART_WaitOnFlagUntilTimeout+0x30>
 8002472:	f7fe fcd9 	bl	8000e28 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800247e:	429a      	cmp	r2, r3
 8002480:	d241      	bcs.n	8002506 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a2:	637a      	str	r2, [r7, #52]	; 0x34
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024aa:	e841 2300 	strex	r3, r2, [r1]
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e5      	bne.n	8002482 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	613b      	str	r3, [r7, #16]
   return(result);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024d6:	623a      	str	r2, [r7, #32]
 80024d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024da:	69f9      	ldr	r1, [r7, #28]
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	e841 2300 	strex	r3, r2, [r1]
 80024e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e5      	bne.n	80024b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e00f      	b.n	8002526 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	429a      	cmp	r2, r3
 8002522:	d09f      	beq.n	8002464 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3740      	adds	r7, #64	; 0x40
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002534:	b0c0      	sub	sp, #256	; 0x100
 8002536:	af00      	add	r7, sp, #0
 8002538:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	ea40 0301 	orr.w	r3, r0, r1
 8002558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800255a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	431a      	orrs	r2, r3
 8002570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002588:	f021 010c 	bic.w	r1, r1, #12
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002596:	430b      	orrs	r3, r1
 8002598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025aa:	6999      	ldr	r1, [r3, #24]
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	ea40 0301 	orr.w	r3, r0, r1
 80025b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b8f      	ldr	r3, [pc, #572]	; (80027fc <UART_SetConfig+0x2cc>)
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d005      	beq.n	80025d0 <UART_SetConfig+0xa0>
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b8d      	ldr	r3, [pc, #564]	; (8002800 <UART_SetConfig+0x2d0>)
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d104      	bne.n	80025da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d0:	f7ff fb6c 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 80025d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025d8:	e003      	b.n	80025e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025da:	f7ff fb53 	bl	8001c84 <HAL_RCC_GetPCLK1Freq>
 80025de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ec:	f040 810c 	bne.w	8002808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002602:	4622      	mov	r2, r4
 8002604:	462b      	mov	r3, r5
 8002606:	1891      	adds	r1, r2, r2
 8002608:	65b9      	str	r1, [r7, #88]	; 0x58
 800260a:	415b      	adcs	r3, r3
 800260c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800260e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002612:	4621      	mov	r1, r4
 8002614:	eb12 0801 	adds.w	r8, r2, r1
 8002618:	4629      	mov	r1, r5
 800261a:	eb43 0901 	adc.w	r9, r3, r1
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800262e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002632:	4690      	mov	r8, r2
 8002634:	4699      	mov	r9, r3
 8002636:	4623      	mov	r3, r4
 8002638:	eb18 0303 	adds.w	r3, r8, r3
 800263c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002640:	462b      	mov	r3, r5
 8002642:	eb49 0303 	adc.w	r3, r9, r3
 8002646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002656:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800265a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800265e:	460b      	mov	r3, r1
 8002660:	18db      	adds	r3, r3, r3
 8002662:	653b      	str	r3, [r7, #80]	; 0x50
 8002664:	4613      	mov	r3, r2
 8002666:	eb42 0303 	adc.w	r3, r2, r3
 800266a:	657b      	str	r3, [r7, #84]	; 0x54
 800266c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002674:	f7fd fe04 	bl	8000280 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4b61      	ldr	r3, [pc, #388]	; (8002804 <UART_SetConfig+0x2d4>)
 800267e:	fba3 2302 	umull	r2, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	011c      	lsls	r4, r3, #4
 8002686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800268a:	2200      	movs	r2, #0
 800268c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002690:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002698:	4642      	mov	r2, r8
 800269a:	464b      	mov	r3, r9
 800269c:	1891      	adds	r1, r2, r2
 800269e:	64b9      	str	r1, [r7, #72]	; 0x48
 80026a0:	415b      	adcs	r3, r3
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026a8:	4641      	mov	r1, r8
 80026aa:	eb12 0a01 	adds.w	sl, r2, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	eb43 0b01 	adc.w	fp, r3, r1
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026c8:	4692      	mov	sl, r2
 80026ca:	469b      	mov	fp, r3
 80026cc:	4643      	mov	r3, r8
 80026ce:	eb1a 0303 	adds.w	r3, sl, r3
 80026d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026d6:	464b      	mov	r3, r9
 80026d8:	eb4b 0303 	adc.w	r3, fp, r3
 80026dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026f4:	460b      	mov	r3, r1
 80026f6:	18db      	adds	r3, r3, r3
 80026f8:	643b      	str	r3, [r7, #64]	; 0x40
 80026fa:	4613      	mov	r3, r2
 80026fc:	eb42 0303 	adc.w	r3, r2, r3
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
 8002702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800270a:	f7fd fdb9 	bl	8000280 <__aeabi_uldivmod>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4611      	mov	r1, r2
 8002714:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <UART_SetConfig+0x2d4>)
 8002716:	fba3 2301 	umull	r2, r3, r3, r1
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	2264      	movs	r2, #100	; 0x64
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	1acb      	subs	r3, r1, r3
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <UART_SetConfig+0x2d4>)
 800272c:	fba3 2302 	umull	r2, r3, r3, r2
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002738:	441c      	add	r4, r3
 800273a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002744:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	1891      	adds	r1, r2, r2
 8002752:	63b9      	str	r1, [r7, #56]	; 0x38
 8002754:	415b      	adcs	r3, r3
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800275c:	4641      	mov	r1, r8
 800275e:	1851      	adds	r1, r2, r1
 8002760:	6339      	str	r1, [r7, #48]	; 0x30
 8002762:	4649      	mov	r1, r9
 8002764:	414b      	adcs	r3, r1
 8002766:	637b      	str	r3, [r7, #52]	; 0x34
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002774:	4659      	mov	r1, fp
 8002776:	00cb      	lsls	r3, r1, #3
 8002778:	4651      	mov	r1, sl
 800277a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800277e:	4651      	mov	r1, sl
 8002780:	00ca      	lsls	r2, r1, #3
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	4603      	mov	r3, r0
 8002788:	4642      	mov	r2, r8
 800278a:	189b      	adds	r3, r3, r2
 800278c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002790:	464b      	mov	r3, r9
 8002792:	460a      	mov	r2, r1
 8002794:	eb42 0303 	adc.w	r3, r2, r3
 8002798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027b0:	460b      	mov	r3, r1
 80027b2:	18db      	adds	r3, r3, r3
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b6:	4613      	mov	r3, r2
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027c6:	f7fd fd5b 	bl	8000280 <__aeabi_uldivmod>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <UART_SetConfig+0x2d4>)
 80027d0:	fba3 1302 	umull	r1, r3, r3, r2
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	2164      	movs	r1, #100	; 0x64
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	3332      	adds	r3, #50	; 0x32
 80027e2:	4a08      	ldr	r2, [pc, #32]	; (8002804 <UART_SetConfig+0x2d4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	f003 0207 	and.w	r2, r3, #7
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4422      	add	r2, r4
 80027f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027f8:	e106      	b.n	8002a08 <UART_SetConfig+0x4d8>
 80027fa:	bf00      	nop
 80027fc:	40011000 	.word	0x40011000
 8002800:	40011400 	.word	0x40011400
 8002804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002812:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800281a:	4642      	mov	r2, r8
 800281c:	464b      	mov	r3, r9
 800281e:	1891      	adds	r1, r2, r2
 8002820:	6239      	str	r1, [r7, #32]
 8002822:	415b      	adcs	r3, r3
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282a:	4641      	mov	r1, r8
 800282c:	1854      	adds	r4, r2, r1
 800282e:	4649      	mov	r1, r9
 8002830:	eb43 0501 	adc.w	r5, r3, r1
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	00eb      	lsls	r3, r5, #3
 800283e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002842:	00e2      	lsls	r2, r4, #3
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	4643      	mov	r3, r8
 800284a:	18e3      	adds	r3, r4, r3
 800284c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002850:	464b      	mov	r3, r9
 8002852:	eb45 0303 	adc.w	r3, r5, r3
 8002856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800285a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002876:	4629      	mov	r1, r5
 8002878:	008b      	lsls	r3, r1, #2
 800287a:	4621      	mov	r1, r4
 800287c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002880:	4621      	mov	r1, r4
 8002882:	008a      	lsls	r2, r1, #2
 8002884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002888:	f7fd fcfa 	bl	8000280 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4b60      	ldr	r3, [pc, #384]	; (8002a14 <UART_SetConfig+0x4e4>)
 8002892:	fba3 2302 	umull	r2, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	011c      	lsls	r4, r3, #4
 800289a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028ac:	4642      	mov	r2, r8
 80028ae:	464b      	mov	r3, r9
 80028b0:	1891      	adds	r1, r2, r2
 80028b2:	61b9      	str	r1, [r7, #24]
 80028b4:	415b      	adcs	r3, r3
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028bc:	4641      	mov	r1, r8
 80028be:	1851      	adds	r1, r2, r1
 80028c0:	6139      	str	r1, [r7, #16]
 80028c2:	4649      	mov	r1, r9
 80028c4:	414b      	adcs	r3, r1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d4:	4659      	mov	r1, fp
 80028d6:	00cb      	lsls	r3, r1, #3
 80028d8:	4651      	mov	r1, sl
 80028da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028de:	4651      	mov	r1, sl
 80028e0:	00ca      	lsls	r2, r1, #3
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	4642      	mov	r2, r8
 80028ea:	189b      	adds	r3, r3, r2
 80028ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028f0:	464b      	mov	r3, r9
 80028f2:	460a      	mov	r2, r1
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	67bb      	str	r3, [r7, #120]	; 0x78
 8002906:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002914:	4649      	mov	r1, r9
 8002916:	008b      	lsls	r3, r1, #2
 8002918:	4641      	mov	r1, r8
 800291a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800291e:	4641      	mov	r1, r8
 8002920:	008a      	lsls	r2, r1, #2
 8002922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002926:	f7fd fcab 	bl	8000280 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4611      	mov	r1, r2
 8002930:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <UART_SetConfig+0x4e4>)
 8002932:	fba3 2301 	umull	r2, r3, r3, r1
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2264      	movs	r2, #100	; 0x64
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	1acb      	subs	r3, r1, r3
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	3332      	adds	r3, #50	; 0x32
 8002944:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <UART_SetConfig+0x4e4>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002950:	441c      	add	r4, r3
 8002952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002956:	2200      	movs	r2, #0
 8002958:	673b      	str	r3, [r7, #112]	; 0x70
 800295a:	677a      	str	r2, [r7, #116]	; 0x74
 800295c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002960:	4642      	mov	r2, r8
 8002962:	464b      	mov	r3, r9
 8002964:	1891      	adds	r1, r2, r2
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	415b      	adcs	r3, r3
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002970:	4641      	mov	r1, r8
 8002972:	1851      	adds	r1, r2, r1
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	4649      	mov	r1, r9
 8002978:	414b      	adcs	r3, r1
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002988:	4659      	mov	r1, fp
 800298a:	00cb      	lsls	r3, r1, #3
 800298c:	4651      	mov	r1, sl
 800298e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002992:	4651      	mov	r1, sl
 8002994:	00ca      	lsls	r2, r1, #3
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	4603      	mov	r3, r0
 800299c:	4642      	mov	r2, r8
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a2:	464b      	mov	r3, r9
 80029a4:	460a      	mov	r2, r1
 80029a6:	eb42 0303 	adc.w	r3, r2, r3
 80029aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	663b      	str	r3, [r7, #96]	; 0x60
 80029b6:	667a      	str	r2, [r7, #100]	; 0x64
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029c4:	4649      	mov	r1, r9
 80029c6:	008b      	lsls	r3, r1, #2
 80029c8:	4641      	mov	r1, r8
 80029ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ce:	4641      	mov	r1, r8
 80029d0:	008a      	lsls	r2, r1, #2
 80029d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029d6:	f7fd fc53 	bl	8000280 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <UART_SetConfig+0x4e4>)
 80029e0:	fba3 1302 	umull	r1, r3, r3, r2
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	4a08      	ldr	r2, [pc, #32]	; (8002a14 <UART_SetConfig+0x4e4>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4422      	add	r2, r4
 8002a06:	609a      	str	r2, [r3, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a14:	51eb851f 	.word	0x51eb851f

08002a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0208 	add.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f103 0208 	add.w	r2, r3, #8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0208 	add.w	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad0:	d103      	bne.n	8002ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e00c      	b.n	8002af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3308      	adds	r3, #8
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e002      	b.n	8002ae8 <vListInsert+0x2e>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d2f6      	bcs.n	8002ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6852      	ldr	r2, [r2, #4]
 8002b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d103      	bne.n	8002b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	1e5a      	subs	r2, r3, #1
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002baa:	f002 fa4b 	bl	8005044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	441a      	add	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d114      	bne.n	8002c2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01a      	beq.n	8002c3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3310      	adds	r3, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 f841 	bl	8003c94 <xTaskRemoveFromEventList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d012      	beq.n	8002c3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <xQueueGenericReset+0xcc>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	e009      	b.n	8002c3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3310      	adds	r3, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fef2 	bl	8002a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff feed 	bl	8002a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c3e:	f002 fa31 	bl	80050a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c68:	f383 8811 	msr	BASEPRI, r3
 8002c6c:	f3bf 8f6f 	isb	sy
 8002c70:	f3bf 8f4f 	dsb	sy
 8002c74:	613b      	str	r3, [r7, #16]
}
 8002c76:	bf00      	nop
 8002c78:	e7fe      	b.n	8002c78 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	e004      	b.n	8002c90 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	3350      	adds	r3, #80	; 0x50
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 faf7 	bl	8005288 <pvPortMalloc>
 8002c9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3350      	adds	r3, #80	; 0x50
 8002caa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f805 	bl	8002cc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e002      	b.n	8002cea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	69b8      	ldr	r0, [r7, #24]
 8002cfa:	f7ff ff41 	bl	8002b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	; 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <xQueueGenericSend+0x32>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d3e:	bf00      	nop
 8002d40:	e7fe      	b.n	8002d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <xQueueGenericSend+0x40>
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <xQueueGenericSend+0x44>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <xQueueGenericSend+0x46>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <xQueueGenericSend+0x60>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSend+0x6e>
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSend+0x72>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSend+0x74>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xQueueGenericSend+0x8e>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	623b      	str	r3, [r7, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d9e:	f001 f915 	bl	8003fcc <xTaskGetSchedulerState>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <xQueueGenericSend+0x9e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericSend+0xa2>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericSend+0xa4>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <xQueueGenericSend+0xbe>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61fb      	str	r3, [r7, #28]
}
 8002dca:	bf00      	nop
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dce:	f002 f939 	bl	8005044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <xQueueGenericSend+0xd4>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d129      	bne.n	8002e38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dea:	f000 fa07 	bl	80031fc <prvCopyDataToQueue>
 8002dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 ff49 	bl	8003c94 <xTaskRemoveFromEventList>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <xQueueGenericSend+0x1f8>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	e00a      	b.n	8002e30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <xQueueGenericSend+0x1f8>)
 8002e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e30:	f002 f938 	bl	80050a4 <vPortExitCritical>
				return pdPASS;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e063      	b.n	8002f00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e3e:	f002 f931 	bl	80050a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e05c      	b.n	8002f00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 ff81 	bl	8003d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e56:	2301      	movs	r3, #1
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e5a:	f002 f923 	bl	80050a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e5e:	f000 fcfb 	bl	8003858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e62:	f002 f8ef 	bl	8005044 <vPortEnterCritical>
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e72:	d103      	bne.n	8002e7c <xQueueGenericSend+0x16c>
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e88:	d103      	bne.n	8002e92 <xQueueGenericSend+0x182>
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e92:	f002 f907 	bl	80050a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e96:	1d3a      	adds	r2, r7, #4
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ff70 	bl	8003d84 <xTaskCheckForTimeOut>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d124      	bne.n	8002ef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eac:	f000 fa9e 	bl	80033ec <prvIsQueueFull>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d018      	beq.n	8002ee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	3310      	adds	r3, #16
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fe98 	bl	8003bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec6:	f000 fa29 	bl	800331c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eca:	f000 fcd3 	bl	8003874 <xTaskResumeAll>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f47f af7c 	bne.w	8002dce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <xQueueGenericSend+0x1f8>)
 8002ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	e772      	b.n	8002dce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eea:	f000 fa17 	bl	800331c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eee:	f000 fcc1 	bl	8003874 <xTaskResumeAll>
 8002ef2:	e76c      	b.n	8002dce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef6:	f000 fa11 	bl	800331c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efa:	f000 fcbb 	bl	8003874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3738      	adds	r7, #56	; 0x38
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f36:	bf00      	nop
 8002f38:	e7fe      	b.n	8002f38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d103      	bne.n	8002f48 <xQueueGenericSendFromISR+0x3c>
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <xQueueGenericSendFromISR+0x40>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <xQueueGenericSendFromISR+0x42>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	623b      	str	r3, [r7, #32]
}
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSendFromISR+0x6a>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSendFromISR+0x6e>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericSendFromISR+0x70>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	61fb      	str	r3, [r7, #28]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f96:	f002 f937 	bl	8005208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	61ba      	str	r2, [r7, #24]
 8002fb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <xQueueGenericSendFromISR+0xbc>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d12c      	bne.n	8003022 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd8:	f000 f910 	bl	80031fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe4:	d112      	bne.n	800300c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	3324      	adds	r3, #36	; 0x24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fe4e 	bl	8003c94 <xTaskRemoveFromEventList>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00e      	beq.n	800301c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e007      	b.n	800301c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800300c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003010:	3301      	adds	r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	b25a      	sxtb	r2, r3
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003020:	e001      	b.n	8003026 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003022:	2300      	movs	r3, #0
 8003024:	637b      	str	r3, [r7, #52]	; 0x34
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003030:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003034:	4618      	mov	r0, r3
 8003036:	3738      	adds	r7, #56	; 0x38
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003048:	2300      	movs	r3, #0
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <xQueueReceive+0x30>
	__asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	623b      	str	r3, [r7, #32]
}
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <xQueueReceive+0x3e>
 8003072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <xQueueReceive+0x42>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <xQueueReceive+0x44>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueReceive+0x5e>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61fb      	str	r3, [r7, #28]
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800309a:	f000 ff97 	bl	8003fcc <xTaskGetSchedulerState>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <xQueueReceive+0x6e>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <xQueueReceive+0x72>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <xQueueReceive+0x74>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <xQueueReceive+0x8e>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	61bb      	str	r3, [r7, #24]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030ca:	f001 ffbb 	bl	8005044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01f      	beq.n	800311a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030de:	f000 f8f7 	bl	80032d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00f      	beq.n	8003112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	3310      	adds	r3, #16
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fdcc 	bl	8003c94 <xTaskRemoveFromEventList>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <xQueueReceive+0x1bc>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003112:	f001 ffc7 	bl	80050a4 <vPortExitCritical>
				return pdPASS;
 8003116:	2301      	movs	r3, #1
 8003118:	e069      	b.n	80031ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003120:	f001 ffc0 	bl	80050a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003124:	2300      	movs	r3, #0
 8003126:	e062      	b.n	80031ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fe10 	bl	8003d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800313c:	f001 ffb2 	bl	80050a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003140:	f000 fb8a 	bl	8003858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003144:	f001 ff7e 	bl	8005044 <vPortEnterCritical>
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800314e:	b25b      	sxtb	r3, r3
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003154:	d103      	bne.n	800315e <xQueueReceive+0x122>
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003164:	b25b      	sxtb	r3, r3
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316a:	d103      	bne.n	8003174 <xQueueReceive+0x138>
 800316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003174:	f001 ff96 	bl	80050a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003178:	1d3a      	adds	r2, r7, #4
 800317a:	f107 0310 	add.w	r3, r7, #16
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fdff 	bl	8003d84 <xTaskCheckForTimeOut>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d123      	bne.n	80031d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800318c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800318e:	f000 f917 	bl	80033c0 <prvIsQueueEmpty>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d017      	beq.n	80031c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fd27 	bl	8003bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a8:	f000 f8b8 	bl	800331c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031ac:	f000 fb62 	bl	8003874 <xTaskResumeAll>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d189      	bne.n	80030ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <xQueueReceive+0x1bc>)
 80031b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	e780      	b.n	80030ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ca:	f000 f8a7 	bl	800331c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ce:	f000 fb51 	bl	8003874 <xTaskResumeAll>
 80031d2:	e77a      	b.n	80030ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d6:	f000 f8a1 	bl	800331c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031da:	f000 fb4b 	bl	8003874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e0:	f000 f8ee 	bl	80033c0 <prvIsQueueEmpty>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f43f af6f 	beq.w	80030ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3730      	adds	r7, #48	; 0x30
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d14d      	bne.n	80032be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 feee 	bl	8004008 <xTaskPriorityDisinherit>
 800322c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	e043      	b.n	80032be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d119      	bne.n	8003270 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6858      	ldr	r0, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	461a      	mov	r2, r3
 8003246:	68b9      	ldr	r1, [r7, #8]
 8003248:	f002 fab8 	bl	80057bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	441a      	add	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	429a      	cmp	r2, r3
 8003264:	d32b      	bcc.n	80032be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	e026      	b.n	80032be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68d8      	ldr	r0, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	461a      	mov	r2, r3
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	f002 fa9e 	bl	80057bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	425b      	negs	r3, r3
 800328a:	441a      	add	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	425b      	negs	r3, r3
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d105      	bne.n	80032be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032c6:	697b      	ldr	r3, [r7, #20]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d018      	beq.n	8003314 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d303      	bcc.n	8003304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	461a      	mov	r2, r3
 800330e:	6838      	ldr	r0, [r7, #0]
 8003310:	f002 fa54 	bl	80057bc <memcpy>
	}
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003324:	f001 fe8e 	bl	8005044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003330:	e011      	b.n	8003356 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3324      	adds	r3, #36	; 0x24
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fca8 	bl	8003c94 <xTaskRemoveFromEventList>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800334a:	f000 fd7d 	bl	8003e48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3b01      	subs	r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	dce9      	bgt.n	8003332 <prvUnlockQueue+0x16>
 800335e:	e000      	b.n	8003362 <prvUnlockQueue+0x46>
					break;
 8003360:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800336a:	f001 fe9b 	bl	80050a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800336e:	f001 fe69 	bl	8005044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003378:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800337a:	e011      	b.n	80033a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d012      	beq.n	80033aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3310      	adds	r3, #16
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fc83 	bl	8003c94 <xTaskRemoveFromEventList>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003394:	f000 fd58 	bl	8003e48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003398:	7bbb      	ldrb	r3, [r7, #14]
 800339a:	3b01      	subs	r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	dce9      	bgt.n	800337c <prvUnlockQueue+0x60>
 80033a8:	e000      	b.n	80033ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	22ff      	movs	r2, #255	; 0xff
 80033b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033b4:	f001 fe76 	bl	80050a4 <vPortExitCritical>
}
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c8:	f001 fe3c 	bl	8005044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e001      	b.n	80033de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033de:	f001 fe61 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033f4:	f001 fe26 	bl	8005044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	429a      	cmp	r2, r3
 8003402:	d102      	bne.n	800340a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	e001      	b.n	800340e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800340e:	f001 fe49 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e014      	b.n	8003456 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800342c:	4a0f      	ldr	r2, [pc, #60]	; (800346c <vQueueAddToRegistry+0x50>)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003438:	490c      	ldr	r1, [pc, #48]	; (800346c <vQueueAddToRegistry+0x50>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <vQueueAddToRegistry+0x50>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800344e:	e006      	b.n	800345e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b07      	cmp	r3, #7
 800345a:	d9e7      	bls.n	800342c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000110 	.word	0x20000110

08003470 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003480:	f001 fde0 	bl	8005044 <vPortEnterCritical>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800348a:	b25b      	sxtb	r3, r3
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003490:	d103      	bne.n	800349a <vQueueWaitForMessageRestricted+0x2a>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a6:	d103      	bne.n	80034b0 <vQueueWaitForMessageRestricted+0x40>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b0:	f001 fdf8 	bl	80050a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d106      	bne.n	80034ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fbb9 	bl	8003c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	f7ff ff26 	bl	800331c <prvUnlockQueue>
	}
 80034d0:	bf00      	nop
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af04      	add	r7, sp, #16
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fecb 	bl	8005288 <pvPortMalloc>
 80034f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00e      	beq.n	8003518 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034fa:	2058      	movs	r0, #88	; 0x58
 80034fc:	f001 fec4 	bl	8005288 <pvPortMalloc>
 8003500:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	631a      	str	r2, [r3, #48]	; 0x30
 800350e:	e005      	b.n	800351c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003510:	6978      	ldr	r0, [r7, #20]
 8003512:	f001 ff7d 	bl	8005410 <vPortFree>
 8003516:	e001      	b.n	800351c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d013      	beq.n	800354a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	2300      	movs	r3, #0
 8003526:	9303      	str	r3, [sp, #12]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	9302      	str	r3, [sp, #8]
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f80e 	bl	800355a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800353e:	69f8      	ldr	r0, [r7, #28]
 8003540:	f000 f89a 	bl	8003678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003544:	2301      	movs	r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e002      	b.n	8003550 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800354e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003550:	69bb      	ldr	r3, [r7, #24]
	}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b088      	sub	sp, #32
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	461a      	mov	r2, r3
 8003572:	21a5      	movs	r1, #165	; 0xa5
 8003574:	f002 f8ed 	bl	8005752 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003582:	3b01      	subs	r3, #1
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <prvInitialiseNewTask+0x58>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	617b      	str	r3, [r7, #20]
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01f      	beq.n	80035f8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e012      	b.n	80035e4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	4413      	add	r3, r2
 80035c4:	7819      	ldrb	r1, [r3, #0]
 80035c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	3334      	adds	r3, #52	; 0x34
 80035ce:	460a      	mov	r2, r1
 80035d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b09      	cmp	r3, #9
 80035e8:	d9e9      	bls.n	80035be <prvInitialiseNewTask+0x64>
 80035ea:	e000      	b.n	80035ee <prvInitialiseNewTask+0x94>
			{
				break;
 80035ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035f6:	e003      	b.n	8003600 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	2b0e      	cmp	r3, #14
 8003604:	d901      	bls.n	800360a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003606:	230e      	movs	r3, #14
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003614:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	2200      	movs	r2, #0
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	3304      	adds	r3, #4
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fa19 	bl	8002a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	3318      	adds	r3, #24
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fa14 	bl	8002a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003634:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	f1c3 020f 	rsb	r2, r3, #15
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	2200      	movs	r2, #0
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	69b8      	ldr	r0, [r7, #24]
 800365a:	f001 fbb9 	bl	8004dd0 <pxPortInitialiseStack>
 800365e:	4602      	mov	r2, r0
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003670:	bf00      	nop
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003680:	f001 fce0 	bl	8005044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <prvAddNewTaskToReadyList+0xc0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <prvAddNewTaskToReadyList+0xc0>)
 800368c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <prvAddNewTaskToReadyList+0xc4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003696:	4a29      	ldr	r2, [pc, #164]	; (800373c <prvAddNewTaskToReadyList+0xc4>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800369c:	4b26      	ldr	r3, [pc, #152]	; (8003738 <prvAddNewTaskToReadyList+0xc0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d110      	bne.n	80036c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036a4:	f000 fbf4 	bl	8003e90 <prvInitialiseTaskLists>
 80036a8:	e00d      	b.n	80036c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036aa:	4b25      	ldr	r3, [pc, #148]	; (8003740 <prvAddNewTaskToReadyList+0xc8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d109      	bne.n	80036c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <prvAddNewTaskToReadyList+0xc4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d802      	bhi.n	80036c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036c0:	4a1e      	ldr	r2, [pc, #120]	; (800373c <prvAddNewTaskToReadyList+0xc4>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <prvAddNewTaskToReadyList+0xcc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <prvAddNewTaskToReadyList+0xcc>)
 80036ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <prvAddNewTaskToReadyList+0xcc>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <prvAddNewTaskToReadyList+0xd0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <prvAddNewTaskToReadyList+0xd0>)
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <prvAddNewTaskToReadyList+0xd4>)
 80036f8:	441a      	add	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f7ff f9b6 	bl	8002a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003706:	f001 fccd 	bl	80050a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <prvAddNewTaskToReadyList+0xc8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <prvAddNewTaskToReadyList+0xc4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <prvAddNewTaskToReadyList+0xd8>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200002f0 	.word	0x200002f0
 800373c:	20000150 	.word	0x20000150
 8003740:	200002fc 	.word	0x200002fc
 8003744:	2000030c 	.word	0x2000030c
 8003748:	200002f8 	.word	0x200002f8
 800374c:	20000154 	.word	0x20000154
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d017      	beq.n	8003796 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <vTaskDelay+0x60>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <vTaskDelay+0x30>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	60bb      	str	r3, [r7, #8]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003784:	f000 f868 	bl	8003858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003788:	2100      	movs	r1, #0
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fcc2 	bl	8004114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003790:	f000 f870 	bl	8003874 <xTaskResumeAll>
 8003794:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <vTaskDelay+0x64>)
 800379e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000318 	.word	0x20000318
 80037b8:	e000ed04 	.word	0xe000ed04

080037bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80037c2:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <vTaskStartScheduler+0x84>)
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2300      	movs	r3, #0
 80037cc:	2282      	movs	r2, #130	; 0x82
 80037ce:	491d      	ldr	r1, [pc, #116]	; (8003844 <vTaskStartScheduler+0x88>)
 80037d0:	481d      	ldr	r0, [pc, #116]	; (8003848 <vTaskStartScheduler+0x8c>)
 80037d2:	f7ff fe81 	bl	80034d8 <xTaskCreate>
 80037d6:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d102      	bne.n	80037e4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80037de:	f000 ffe5 	bl	80047ac <xTimerCreateTimerTask>
 80037e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d116      	bne.n	8003818 <vTaskStartScheduler+0x5c>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	60bb      	str	r3, [r7, #8]
}
 80037fc:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <vTaskStartScheduler+0x90>)
 8003800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <vTaskStartScheduler+0x94>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <vTaskStartScheduler+0x98>)
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003812:	f001 fb65 	bl	8004ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003816:	e00e      	b.n	8003836 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800381e:	d10a      	bne.n	8003836 <vTaskStartScheduler+0x7a>
	__asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	607b      	str	r3, [r7, #4]
}
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <vTaskStartScheduler+0x78>
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000314 	.word	0x20000314
 8003844:	080060ac 	.word	0x080060ac
 8003848:	08003e61 	.word	0x08003e61
 800384c:	20000310 	.word	0x20000310
 8003850:	200002fc 	.word	0x200002fc
 8003854:	200002f4 	.word	0x200002f4

08003858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <vTaskSuspendAll+0x18>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a03      	ldr	r2, [pc, #12]	; (8003870 <vTaskSuspendAll+0x18>)
 8003864:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20000318 	.word	0x20000318

08003874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <xTaskResumeAll+0x114>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	603b      	str	r3, [r7, #0]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038a0:	f001 fbd0 	bl	8005044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <xTaskResumeAll+0x114>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	4a37      	ldr	r2, [pc, #220]	; (8003988 <xTaskResumeAll+0x114>)
 80038ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ae:	4b36      	ldr	r3, [pc, #216]	; (8003988 <xTaskResumeAll+0x114>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d161      	bne.n	800397a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038b6:	4b35      	ldr	r3, [pc, #212]	; (800398c <xTaskResumeAll+0x118>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d05d      	beq.n	800397a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038be:	e02e      	b.n	800391e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <xTaskResumeAll+0x11c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f92d 	bl	8002b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f928 	bl	8002b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2201      	movs	r2, #1
 80038e2:	409a      	lsls	r2, r3
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <xTaskResumeAll+0x120>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <xTaskResumeAll+0x120>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a27      	ldr	r2, [pc, #156]	; (8003998 <xTaskResumeAll+0x124>)
 80038fc:	441a      	add	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f7ff f8b4 	bl	8002a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <xTaskResumeAll+0x128>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d302      	bcc.n	800391e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003918:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <xTaskResumeAll+0x12c>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <xTaskResumeAll+0x11c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1cc      	bne.n	80038c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800392c:	f000 fb2e 	bl	8003f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <xTaskResumeAll+0x130>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800393c:	f000 f846 	bl	80039cc <xTaskIncrementTick>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <xTaskResumeAll+0x12c>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f1      	bne.n	800393c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <xTaskResumeAll+0x130>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <xTaskResumeAll+0x12c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <xTaskResumeAll+0x134>)
 800396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800397a:	f001 fb93 	bl	80050a4 <vPortExitCritical>

	return xAlreadyYielded;
 800397e:	68bb      	ldr	r3, [r7, #8]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000318 	.word	0x20000318
 800398c:	200002f0 	.word	0x200002f0
 8003990:	200002b0 	.word	0x200002b0
 8003994:	200002f8 	.word	0x200002f8
 8003998:	20000154 	.word	0x20000154
 800399c:	20000150 	.word	0x20000150
 80039a0:	20000304 	.word	0x20000304
 80039a4:	20000300 	.word	0x20000300
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <xTaskGetTickCount+0x1c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	200002f4 	.word	0x200002f4

080039cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d6:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <xTaskIncrementTick+0x144>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8088 	bne.w	8003af0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <xTaskIncrementTick+0x148>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039e8:	4a4a      	ldr	r2, [pc, #296]	; (8003b14 <xTaskIncrementTick+0x148>)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d120      	bne.n	8003a36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039f4:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <xTaskIncrementTick+0x14c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <xTaskIncrementTick+0x48>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	603b      	str	r3, [r7, #0]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <xTaskIncrementTick+0x46>
 8003a14:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <xTaskIncrementTick+0x150>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3e      	ldr	r2, [pc, #248]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <xTaskIncrementTick+0x150>)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <xTaskIncrementTick+0x154>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <xTaskIncrementTick+0x154>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	f000 faab 	bl	8003f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d348      	bcc.n	8003ad2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a50:	601a      	str	r2, [r3, #0]
					break;
 8003a52:	e03e      	b.n	8003ad2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a54:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d203      	bcs.n	8003a74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a6c:	4a2d      	ldr	r2, [pc, #180]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a72:	e02e      	b.n	8003ad2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff f857 	bl	8002b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3318      	adds	r3, #24
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f84e 	bl	8002b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <xTaskIncrementTick+0x15c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <xTaskIncrementTick+0x15c>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <xTaskIncrementTick+0x160>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fe ffda 	bl	8002a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3b9      	bcc.n	8003a40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad0:	e7b6      	b.n	8003a40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4914      	ldr	r1, [pc, #80]	; (8003b2c <xTaskIncrementTick+0x160>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d907      	bls.n	8003afa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003aea:	2301      	movs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	e004      	b.n	8003afa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <xTaskIncrementTick+0x168>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3301      	adds	r3, #1
 8003af6:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <xTaskIncrementTick+0x168>)
 8003af8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <xTaskIncrementTick+0x16c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b06:	697b      	ldr	r3, [r7, #20]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000318 	.word	0x20000318
 8003b14:	200002f4 	.word	0x200002f4
 8003b18:	200002a8 	.word	0x200002a8
 8003b1c:	200002ac 	.word	0x200002ac
 8003b20:	20000308 	.word	0x20000308
 8003b24:	20000310 	.word	0x20000310
 8003b28:	200002f8 	.word	0x200002f8
 8003b2c:	20000154 	.word	0x20000154
 8003b30:	20000150 	.word	0x20000150
 8003b34:	20000300 	.word	0x20000300
 8003b38:	20000304 	.word	0x20000304

08003b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <vTaskSwitchContext+0xa4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <vTaskSwitchContext+0xa8>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b50:	e03f      	b.n	8003bd2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <vTaskSwitchContext+0xa8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <vTaskSwitchContext+0xac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	f1c3 031f 	rsb	r3, r3, #31
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	491f      	ldr	r1, [pc, #124]	; (8003bec <vTaskSwitchContext+0xb0>)
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	607b      	str	r3, [r7, #4]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <vTaskSwitchContext+0x5a>
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <vTaskSwitchContext+0xb0>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d104      	bne.n	8003bc8 <vTaskSwitchContext+0x8c>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <vTaskSwitchContext+0xb4>)
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000318 	.word	0x20000318
 8003be4:	20000304 	.word	0x20000304
 8003be8:	200002f8 	.word	0x200002f8
 8003bec:	20000154 	.word	0x20000154
 8003bf0:	20000150 	.word	0x20000150

08003bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <vTaskPlaceOnEventList+0x44>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe ff49 	bl	8002aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c28:	2101      	movs	r1, #1
 8003c2a:	6838      	ldr	r0, [r7, #0]
 8003c2c:	f000 fa72 	bl	8004114 <prvAddCurrentTaskToDelayedList>
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000150 	.word	0x20000150

08003c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	617b      	str	r3, [r7, #20]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3318      	adds	r3, #24
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7fe ff00 	bl	8002a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	68b8      	ldr	r0, [r7, #8]
 8003c82:	f000 fa47 	bl	8004114 <prvAddCurrentTaskToDelayedList>
	}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000150 	.word	0x20000150

08003c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60fb      	str	r3, [r7, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe ff31 	bl	8002b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <xTaskRemoveFromEventList+0xac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11c      	bne.n	8003d0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ff28 	bl	8002b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <xTaskRemoveFromEventList+0xb0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <xTaskRemoveFromEventList+0xb0>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <xTaskRemoveFromEventList+0xb4>)
 8003cfc:	441a      	add	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe feb4 	bl	8002a72 <vListInsertEnd>
 8003d0a:	e005      	b.n	8003d18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3318      	adds	r3, #24
 8003d10:	4619      	mov	r1, r3
 8003d12:	480e      	ldr	r0, [pc, #56]	; (8003d4c <xTaskRemoveFromEventList+0xb8>)
 8003d14:	f7fe fead 	bl	8002a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <xTaskRemoveFromEventList+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d905      	bls.n	8003d32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <xTaskRemoveFromEventList+0xc0>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e001      	b.n	8003d36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d36:	697b      	ldr	r3, [r7, #20]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000318 	.word	0x20000318
 8003d44:	200002f8 	.word	0x200002f8
 8003d48:	20000154 	.word	0x20000154
 8003d4c:	200002b0 	.word	0x200002b0
 8003d50:	20000150 	.word	0x20000150
 8003d54:	20000304 	.word	0x20000304

08003d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <vTaskInternalSetTimeOutState+0x24>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <vTaskInternalSetTimeOutState+0x28>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	20000308 	.word	0x20000308
 8003d80:	200002f4 	.word	0x200002f4

08003d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	613b      	str	r3, [r7, #16]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	60fb      	str	r3, [r7, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dc6:	f001 f93d 	bl	8005044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dca:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <xTaskCheckForTimeOut+0xbc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de2:	d102      	bne.n	8003dea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	e023      	b.n	8003e32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <xTaskCheckForTimeOut+0xc0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d007      	beq.n	8003e06 <xTaskCheckForTimeOut+0x82>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e015      	b.n	8003e32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d20b      	bcs.n	8003e28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ff9b 	bl	8003d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e004      	b.n	8003e32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e32:	f001 f937 	bl	80050a4 <vPortExitCritical>

	return xReturn;
 8003e36:	69fb      	ldr	r3, [r7, #28]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200002f4 	.word	0x200002f4
 8003e44:	20000308 	.word	0x20000308

08003e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <vTaskMissedYield+0x14>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	20000304 	.word	0x20000304

08003e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e68:	f000 f852 	bl	8003f10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <prvIdleTask+0x28>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d9f9      	bls.n	8003e68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <prvIdleTask+0x2c>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e84:	e7f0      	b.n	8003e68 <prvIdleTask+0x8>
 8003e86:	bf00      	nop
 8003e88:	20000154 	.word	0x20000154
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	e00c      	b.n	8003eb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <prvInitialiseTaskLists+0x60>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fdb4 	bl	8002a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b0e      	cmp	r3, #14
 8003eba:	d9ef      	bls.n	8003e9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ebc:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <prvInitialiseTaskLists+0x64>)
 8003ebe:	f7fe fdab 	bl	8002a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ec2:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <prvInitialiseTaskLists+0x68>)
 8003ec4:	f7fe fda8 	bl	8002a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ec8:	480c      	ldr	r0, [pc, #48]	; (8003efc <prvInitialiseTaskLists+0x6c>)
 8003eca:	f7fe fda5 	bl	8002a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ece:	480c      	ldr	r0, [pc, #48]	; (8003f00 <prvInitialiseTaskLists+0x70>)
 8003ed0:	f7fe fda2 	bl	8002a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed4:	480b      	ldr	r0, [pc, #44]	; (8003f04 <prvInitialiseTaskLists+0x74>)
 8003ed6:	f7fe fd9f 	bl	8002a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <prvInitialiseTaskLists+0x78>)
 8003edc:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <prvInitialiseTaskLists+0x64>)
 8003ede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <prvInitialiseTaskLists+0x7c>)
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <prvInitialiseTaskLists+0x68>)
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000154 	.word	0x20000154
 8003ef4:	20000280 	.word	0x20000280
 8003ef8:	20000294 	.word	0x20000294
 8003efc:	200002b0 	.word	0x200002b0
 8003f00:	200002c4 	.word	0x200002c4
 8003f04:	200002dc 	.word	0x200002dc
 8003f08:	200002a8 	.word	0x200002a8
 8003f0c:	200002ac 	.word	0x200002ac

08003f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f16:	e019      	b.n	8003f4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f18:	f001 f894 	bl	8005044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <prvCheckTasksWaitingTermination+0x50>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fdff 	bl	8002b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <prvCheckTasksWaitingTermination+0x54>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <prvCheckTasksWaitingTermination+0x54>)
 8003f36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <prvCheckTasksWaitingTermination+0x58>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <prvCheckTasksWaitingTermination+0x58>)
 8003f40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f42:	f001 f8af 	bl	80050a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f810 	bl	8003f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <prvCheckTasksWaitingTermination+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e1      	bne.n	8003f18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200002c4 	.word	0x200002c4
 8003f64:	200002f0 	.word	0x200002f0
 8003f68:	200002d8 	.word	0x200002d8

08003f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fa49 	bl	8005410 <vPortFree>
			vPortFree( pxTCB );
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f001 fa46 	bl	8005410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <prvResetNextTaskUnblockTime+0x38>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fa4:	e008      	b.n	8003fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <prvResetNextTaskUnblockTime+0x38>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	200002a8 	.word	0x200002a8
 8003fc8:	20000310 	.word	0x20000310

08003fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <xTaskGetSchedulerState+0x34>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e008      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <xTaskGetSchedulerState+0x38>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e001      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ff2:	687b      	ldr	r3, [r7, #4]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	200002fc 	.word	0x200002fc
 8004004:	20000318 	.word	0x20000318

08004008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d06e      	beq.n	80040fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <xTaskPriorityDisinherit+0x100>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	429a      	cmp	r2, r3
 8004026:	d00a      	beq.n	800403e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60bb      	str	r3, [r7, #8]
}
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	429a      	cmp	r2, r3
 8004070:	d044      	beq.n	80040fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d140      	bne.n	80040fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fd54 	bl	8002b2c <uxListRemove>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d115      	bne.n	80040b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	491f      	ldr	r1, [pc, #124]	; (800410c <xTaskPriorityDisinherit+0x104>)
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xTaskPriorityDisinherit+0xae>
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	2201      	movs	r2, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43da      	mvns	r2, r3
 80040ac:	4b18      	ldr	r3, [pc, #96]	; (8004110 <xTaskPriorityDisinherit+0x108>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4013      	ands	r3, r2
 80040b2:	4a17      	ldr	r2, [pc, #92]	; (8004110 <xTaskPriorityDisinherit+0x108>)
 80040b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	f1c3 020f 	rsb	r2, r3, #15
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	2201      	movs	r2, #1
 80040d0:	409a      	lsls	r2, r3
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <xTaskPriorityDisinherit+0x108>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <xTaskPriorityDisinherit+0x108>)
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <xTaskPriorityDisinherit+0x104>)
 80040ea:	441a      	add	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fe fcbd 	bl	8002a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040fc:	697b      	ldr	r3, [r7, #20]
	}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000150 	.word	0x20000150
 800410c:	20000154 	.word	0x20000154
 8004110:	200002f8 	.word	0x200002f8

08004114 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800411e:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004124:	4b28      	ldr	r3, [pc, #160]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3304      	adds	r3, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fcfe 	bl	8002b2c <uxListRemove>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	2201      	movs	r2, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4013      	ands	r3, r2
 800414a:	4a20      	ldr	r2, [pc, #128]	; (80041cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800414c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004154:	d10a      	bne.n	800416c <prvAddCurrentTaskToDelayedList+0x58>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	481a      	ldr	r0, [pc, #104]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004166:	f7fe fc84 	bl	8002a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800416a:	e026      	b.n	80041ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d209      	bcs.n	8004198 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f7fe fc92 	bl	8002aba <vListInsert>
}
 8004196:	e010      	b.n	80041ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f7fe fc88 	bl	8002aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d202      	bcs.n	80041ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041b4:	4a09      	ldr	r2, [pc, #36]	; (80041dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6013      	str	r3, [r2, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200002f4 	.word	0x200002f4
 80041c8:	20000150 	.word	0x20000150
 80041cc:	200002f8 	.word	0x200002f8
 80041d0:	200002dc 	.word	0x200002dc
 80041d4:	200002ac 	.word	0x200002ac
 80041d8:	200002a8 	.word	0x200002a8
 80041dc:	20000310 	.word	0x20000310

080041e0 <vPadding>:

#endif

/* Function for Lab 2 */

void vPadding(char string [], int padNum) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < padNum; ++i) {
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e00e      	b.n	800420e <vPadding+0x2e>
		strcat(string, " ");
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fb ffed 	bl	80001d0 <strlen>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <vPadding+0x40>)
 8004200:	461a      	mov	r2, r3
 8004202:	460b      	mov	r3, r1
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < padNum; ++i) {
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	dbec      	blt.n	80041f0 <vPadding+0x10>
	}
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	080060b4 	.word	0x080060b4

08004224 <vPrintTCB>:

void vPrintTCB(tskTCB *tcb, char state []) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b0b4      	sub	sp, #208	; 0xd0
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
	char taskName [12];
	memset(taskName, '\0', sizeof(taskName));
 800422e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004232:	220c      	movs	r2, #12
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f001 fa8b 	bl	8005752 <memset>
	strcat(taskName, tcb->pcTaskName);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004242:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fa73 	bl	8005734 <strcat>
	vPadding(taskName, 10 - strlen(taskName));
 800424e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004252:	4618      	mov	r0, r3
 8004254:	f7fb ffbc 	bl	80001d0 <strlen>
 8004258:	4603      	mov	r3, r0
 800425a:	f1c3 030a 	rsb	r3, r3, #10
 800425e:	461a      	mov	r2, r3
 8004260:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004264:	4611      	mov	r1, r2
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff ffba 	bl	80041e0 <vPadding>

	char taskPriority [24];
	memset(taskPriority, '\0', sizeof(taskPriority));
 800426c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004270:	2218      	movs	r2, #24
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fa6c 	bl	8005752 <memset>
	char basePriority [3];
	memset(basePriority, '\0', sizeof(basePriority));
 800427a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800427e:	2203      	movs	r2, #3
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fa65 	bl	8005752 <memset>
	itoa(tcb->uxBasePriority, basePriority, 10);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	4618      	mov	r0, r3
 800428e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004292:	220a      	movs	r2, #10
 8004294:	4619      	mov	r1, r3
 8004296:	f001 f9e9 	bl	800566c <itoa>
	char priority [3];
	memset(priority, '\0', sizeof(priority));
 800429a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800429e:	2203      	movs	r2, #3
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fa55 	bl	8005752 <memset>
	itoa(tcb->uxPriority, priority, 10);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4618      	mov	r0, r3
 80042ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042b2:	220a      	movs	r2, #10
 80042b4:	4619      	mov	r1, r3
 80042b6:	f001 f9d9 	bl	800566c <itoa>
	vPadding(taskPriority, 5);
 80042ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042be:	2105      	movs	r1, #5
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff8d 	bl	80041e0 <vPadding>
	strcat(taskPriority, basePriority);
 80042c6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fa2f 	bl	8005734 <strcat>
	strcat(taskPriority, (strlen(basePriority) == 1) ? " /" : "/");
 80042d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fb ff78 	bl	80001d0 <strlen>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <vPrintTCB+0xc6>
 80042e6:	4a88      	ldr	r2, [pc, #544]	; (8004508 <vPrintTCB+0x2e4>)
 80042e8:	e000      	b.n	80042ec <vPrintTCB+0xc8>
 80042ea:	4a88      	ldr	r2, [pc, #544]	; (800450c <vPrintTCB+0x2e8>)
 80042ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 fa1e 	bl	8005734 <strcat>
	strcat(taskPriority, priority);
 80042f8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80042fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004300:	4611      	mov	r1, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fa16 	bl	8005734 <strcat>
	vPadding(taskPriority, (strlen(priority) == 1) ? 14 : 13);
 8004308:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800430c:	4618      	mov	r0, r3
 800430e:	f7fb ff5f 	bl	80001d0 <strlen>
 8004312:	4603      	mov	r3, r0
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <vPrintTCB+0xf8>
 8004318:	220e      	movs	r2, #14
 800431a:	e000      	b.n	800431e <vPrintTCB+0xfa>
 800431c:	220d      	movs	r2, #13
 800431e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff5b 	bl	80041e0 <vPadding>

	char task_pxStack [12];
	memset(task_pxStack, '\0', sizeof(task_pxStack));
 800432a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800432e:	220c      	movs	r2, #12
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fa0d 	bl	8005752 <memset>
	char tmp [10];
	itoa( (size_t) tcb->pxStack, tmp, 16);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	4618      	mov	r0, r3
 800433e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004342:	2210      	movs	r2, #16
 8004344:	4619      	mov	r1, r3
 8004346:	f001 f991 	bl	800566c <itoa>
	strcat(task_pxStack, "0x");
 800434a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800434e:	4618      	mov	r0, r3
 8004350:	f7fb ff3e 	bl	80001d0 <strlen>
 8004354:	4603      	mov	r3, r0
 8004356:	461a      	mov	r2, r3
 8004358:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800435c:	4413      	add	r3, r2
 800435e:	4a6c      	ldr	r2, [pc, #432]	; (8004510 <vPrintTCB+0x2ec>)
 8004360:	8811      	ldrh	r1, [r2, #0]
 8004362:	7892      	ldrb	r2, [r2, #2]
 8004364:	8019      	strh	r1, [r3, #0]
 8004366:	709a      	strb	r2, [r3, #2]
	strcat(task_pxStack, tmp);
 8004368:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800436c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f9de 	bl	8005734 <strcat>
	vPadding(task_pxStack, 11 - strlen(task_pxStack));
 8004378:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800437c:	4618      	mov	r0, r3
 800437e:	f7fb ff27 	bl	80001d0 <strlen>
 8004382:	4603      	mov	r3, r0
 8004384:	f1c3 030b 	rsb	r3, r3, #11
 8004388:	461a      	mov	r2, r3
 800438a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff25 	bl	80041e0 <vPadding>

	char task_pxTopOfStack [17];
	memset(task_pxTopOfStack, '\0', sizeof(task_pxTopOfStack));
 8004396:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800439a:	2211      	movs	r2, #17
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f9d7 	bl	8005752 <memset>
	memset(tmp, '\0', sizeof(tmp));
 80043a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043a8:	220a      	movs	r2, #10
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 f9d0 	bl	8005752 <memset>
	itoa( (size_t) tcb->pxTopOfStack, tmp, 16);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80043bc:	2210      	movs	r2, #16
 80043be:	4619      	mov	r1, r3
 80043c0:	f001 f954 	bl	800566c <itoa>
	strcat(task_pxTopOfStack, "0x");
 80043c4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fb ff01 	bl	80001d0 <strlen>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461a      	mov	r2, r3
 80043d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043d6:	4413      	add	r3, r2
 80043d8:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <vPrintTCB+0x2ec>)
 80043da:	8811      	ldrh	r1, [r2, #0]
 80043dc:	7892      	ldrb	r2, [r2, #2]
 80043de:	8019      	strh	r1, [r3, #0]
 80043e0:	709a      	strb	r2, [r3, #2]
	strcat(task_pxTopOfStack, tmp);
 80043e2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80043e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 f9a1 	bl	8005734 <strcat>
	vPadding(task_pxTopOfStack, 16 - strlen(task_pxTopOfStack));
 80043f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fb feea 	bl	80001d0 <strlen>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f1c3 0310 	rsb	r3, r3, #16
 8004402:	461a      	mov	r2, r3
 8004404:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fee8 	bl	80041e0 <vPadding>

	char taskState [9];
	memset(taskState, '\0', sizeof(taskState));
 8004410:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004414:	2209      	movs	r2, #9
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f99a 	bl	8005752 <memset>
	strcpy(taskState, state);
 800441e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004422:	6839      	ldr	r1, [r7, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f001 f9d7 	bl	80057d8 <strcpy>

	char msg [100];
	memset(msg, '\0', sizeof(msg));
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	2264      	movs	r2, #100	; 0x64
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f001 f98d 	bl	8005752 <memset>
	vPadding(msg, 1);
 8004438:	f107 0308 	add.w	r3, r7, #8
 800443c:	2101      	movs	r1, #1
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fece 	bl	80041e0 <vPadding>
	strcat(msg, taskName);
 8004444:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004448:	f107 0308 	add.w	r3, r7, #8
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f970 	bl	8005734 <strcat>
	vPadding(msg, 1);
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	2101      	movs	r1, #1
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff fec0 	bl	80041e0 <vPadding>
	strcat(msg, taskPriority);
 8004460:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f001 f962 	bl	8005734 <strcat>
	vPadding(msg, 1);
 8004470:	f107 0308 	add.w	r3, r7, #8
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff feb2 	bl	80041e0 <vPadding>
	strcat(msg, task_pxStack);
 800447c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f954 	bl	8005734 <strcat>
	vPadding(msg, 1);
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fea4 	bl	80041e0 <vPadding>
	strcat(msg, task_pxTopOfStack);
 8004498:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800449c:	f107 0308 	add.w	r3, r7, #8
 80044a0:	4611      	mov	r1, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 f946 	bl	8005734 <strcat>
	vPadding(msg, 1);
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fe96 	bl	80041e0 <vPadding>
	strcat(msg, taskState);
 80044b4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80044b8:	f107 0308 	add.w	r3, r7, #8
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f938 	bl	8005734 <strcat>
	strcat(msg, "\n\r");
 80044c4:	f107 0308 	add.w	r3, r7, #8
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fb fe81 	bl	80001d0 <strlen>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	f107 0308 	add.w	r3, r7, #8
 80044d6:	4413      	add	r3, r2
 80044d8:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <vPrintTCB+0x2f0>)
 80044da:	8811      	ldrh	r1, [r2, #0]
 80044dc:	7892      	ldrb	r2, [r2, #2]
 80044de:	8019      	strh	r1, [r3, #0]
 80044e0:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), 0xffff);
 80044e2:	f107 0308 	add.w	r3, r7, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fb fe72 	bl	80001d0 <strlen>
 80044ec:	4603      	mov	r3, r0
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	f107 0108 	add.w	r1, r7, #8
 80044f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044f8:	4807      	ldr	r0, [pc, #28]	; (8004518 <vPrintTCB+0x2f4>)
 80044fa:	f7fd ff18 	bl	800232e <HAL_UART_Transmit>
}
 80044fe:	bf00      	nop
 8004500:	37d0      	adds	r7, #208	; 0xd0
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	080060b8 	.word	0x080060b8
 800450c:	080060bc 	.word	0x080060bc
 8004510:	080060c0 	.word	0x080060c0
 8004514:	080060c4 	.word	0x080060c4
 8004518:	2000007c 	.word	0x2000007c

0800451c <Taskmonitor>:

void Taskmonitor(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0aa      	sub	sp, #168	; 0xa8
 8004520:	af00      	add	r7, sp, #0
	/* Initialize string */
	char Monitor_data[130];
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 8004522:	463b      	mov	r3, r7
 8004524:	2282      	movs	r2, #130	; 0x82
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f001 f912 	bl	8005752 <memset>

	/* Stop scheduler */
	/* Taskmonitor() will block when UART is transmitting data */
	/* Scheduler will change list data when Taskmonitor() is blocked */
	vTaskSuspendAll();
 800452e:	f7ff f993 	bl	8003858 <vTaskSuspendAll>

	/* Print title */
	sprintf(Monitor_data,"|Name      |Priority(Base/actual)  |pxStack    |pxTopOfStack    |State    |\n\r");
 8004532:	463b      	mov	r3, r7
 8004534:	4995      	ldr	r1, [pc, #596]	; (800478c <Taskmonitor+0x270>)
 8004536:	4618      	mov	r0, r3
 8004538:	f001 f89a 	bl	8005670 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) Monitor_data, strlen(Monitor_data), 0xffff);
 800453c:	463b      	mov	r3, r7
 800453e:	4618      	mov	r0, r3
 8004540:	f7fb fe46 	bl	80001d0 <strlen>
 8004544:	4603      	mov	r3, r0
 8004546:	b29a      	uxth	r2, r3
 8004548:	4639      	mov	r1, r7
 800454a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800454e:	4890      	ldr	r0, [pc, #576]	; (8004790 <Taskmonitor+0x274>)
 8004550:	f7fd feed 	bl	800232e <HAL_UART_Transmit>

	TCB_t *pxNextTCB = NULL, *pxFirstTCB = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800455a:	2300      	movs	r3, #0
 800455c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	for (UBaseType_t priority = 0; priority < configMAX_PRIORITIES; ++priority) {
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004566:	e066      	b.n	8004636 <Taskmonitor+0x11a>

		if (listCURRENT_LIST_LENGTH( &pxReadyTasksLists[priority] ) > ( UBaseType_t ) 0) {
 8004568:	498a      	ldr	r1, [pc, #552]	; (8004794 <Taskmonitor+0x278>)
 800456a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d056      	beq.n	800462c <Taskmonitor+0x110>

			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, &pxReadyTasksLists[priority] );
 800457e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4a82      	ldr	r2, [pc, #520]	; (8004794 <Taskmonitor+0x278>)
 800458c:	4413      	add	r3, r2
 800458e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045aa:	3308      	adds	r3, #8
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d106      	bne.n	80045be <Taskmonitor+0xa2>
 80045b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			do {

				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, &pxReadyTasksLists[priority] );
 80045ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4a6f      	ldr	r2, [pc, #444]	; (8004794 <Taskmonitor+0x278>)
 80045d8:	4413      	add	r3, r2
 80045da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f6:	3308      	adds	r3, #8
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d106      	bne.n	800460a <Taskmonitor+0xee>
 80045fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				vPrintTCB(pxNextTCB, "Ready");
 8004616:	4960      	ldr	r1, [pc, #384]	; (8004798 <Taskmonitor+0x27c>)
 8004618:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800461c:	f7ff fe02 	bl	8004224 <vPrintTCB>

			} while (pxNextTCB != pxFirstTCB);
 8004620:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004628:	429a      	cmp	r2, r3
 800462a:	d1ce      	bne.n	80045ca <Taskmonitor+0xae>
	for (UBaseType_t priority = 0; priority < configMAX_PRIORITIES; ++priority) {
 800462c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004630:	3301      	adds	r3, #1
 8004632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800463a:	2b0e      	cmp	r3, #14
 800463c:	d994      	bls.n	8004568 <Taskmonitor+0x4c>
//			vPrintTCB(curNode->pvOwner, "Blocked");
//			curNode = curNode->pxNext;
//		}
//	}

	if (listCURRENT_LIST_LENGTH( pxDelayedTaskList ) > ( UBaseType_t ) 0) {
 800463e:	4b57      	ldr	r3, [pc, #348]	; (800479c <Taskmonitor+0x280>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d04a      	beq.n	80046de <Taskmonitor+0x1c2>

		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxDelayedTaskList );
 8004648:	4b54      	ldr	r3, [pc, #336]	; (800479c <Taskmonitor+0x280>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004668:	3308      	adds	r3, #8
 800466a:	429a      	cmp	r2, r3
 800466c:	d106      	bne.n	800467c <Taskmonitor+0x160>
 800466e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		do {

			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxDelayedTaskList );
 8004688:	4b44      	ldr	r3, [pc, #272]	; (800479c <Taskmonitor+0x280>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004690:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046a8:	3308      	adds	r3, #8
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d106      	bne.n	80046bc <Taskmonitor+0x1a0>
 80046ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			vPrintTCB(pxNextTCB, "Blocked");
 80046c8:	4935      	ldr	r1, [pc, #212]	; (80047a0 <Taskmonitor+0x284>)
 80046ca:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80046ce:	f7ff fda9 	bl	8004224 <vPrintTCB>

		} while (pxNextTCB != pxFirstTCB);
 80046d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80046d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046da:	429a      	cmp	r2, r3
 80046dc:	d1d4      	bne.n	8004688 <Taskmonitor+0x16c>
//			vPrintTCB(curNode->pvOwner, "Overflow");
//			curNode = curNode->pxNext;
//		}
//	}

	if (listCURRENT_LIST_LENGTH( pxOverflowDelayedTaskList ) > ( UBaseType_t ) 0) {
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <Taskmonitor+0x288>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d04a      	beq.n	800477e <Taskmonitor+0x262>

		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxOverflowDelayedTaskList );
 80046e8:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <Taskmonitor+0x288>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004708:	3308      	adds	r3, #8
 800470a:	429a      	cmp	r2, r3
 800470c:	d106      	bne.n	800471c <Taskmonitor+0x200>
 800470e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		do {

			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxOverflowDelayedTaskList );
 8004728:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <Taskmonitor+0x288>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004748:	3308      	adds	r3, #8
 800474a:	429a      	cmp	r2, r3
 800474c:	d106      	bne.n	800475c <Taskmonitor+0x240>
 800474e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			vPrintTCB(pxNextTCB, "Overflow");
 8004768:	490f      	ldr	r1, [pc, #60]	; (80047a8 <Taskmonitor+0x28c>)
 800476a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800476e:	f7ff fd59 	bl	8004224 <vPrintTCB>

		} while (pxNextTCB != pxFirstTCB);
 8004772:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800477a:	429a      	cmp	r2, r3
 800477c:	d1d4      	bne.n	8004728 <Taskmonitor+0x20c>
	}

	/* Resume scheduler */
	xTaskResumeAll();
 800477e:	f7ff f879 	bl	8003874 <xTaskResumeAll>
}
 8004782:	bf00      	nop
 8004784:	37a8      	adds	r7, #168	; 0xa8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	080060c8 	.word	0x080060c8
 8004790:	2000007c 	.word	0x2000007c
 8004794:	20000154 	.word	0x20000154
 8004798:	08006118 	.word	0x08006118
 800479c:	200002a8 	.word	0x200002a8
 80047a0:	08006120 	.word	0x08006120
 80047a4:	200002ac 	.word	0x200002ac
 80047a8:	08006128 	.word	0x08006128

080047ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047b6:	f000 fad5 	bl	8004d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <xTimerCreateTimerTask+0x54>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <xTimerCreateTimerTask+0x58>)
 80047c4:	9301      	str	r3, [sp, #4]
 80047c6:	2302      	movs	r3, #2
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047d0:	490d      	ldr	r1, [pc, #52]	; (8004808 <xTimerCreateTimerTask+0x5c>)
 80047d2:	480e      	ldr	r0, [pc, #56]	; (800480c <xTimerCreateTimerTask+0x60>)
 80047d4:	f7fe fe80 	bl	80034d8 <xTaskCreate>
 80047d8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	603b      	str	r3, [r7, #0]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80047f6:	687b      	ldr	r3, [r7, #4]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	2000034c 	.word	0x2000034c
 8004804:	20000350 	.word	0x20000350
 8004808:	08006134 	.word	0x08006134
 800480c:	08004945 	.word	0x08004945

08004810 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800481e:	2300      	movs	r3, #0
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	623b      	str	r3, [r7, #32]
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800483e:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <xTimerGenericCommand+0x98>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02a      	beq.n	800489c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b05      	cmp	r3, #5
 8004856:	dc18      	bgt.n	800488a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004858:	f7ff fbb8 	bl	8003fcc <xTaskGetSchedulerState>
 800485c:	4603      	mov	r3, r0
 800485e:	2b02      	cmp	r3, #2
 8004860:	d109      	bne.n	8004876 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <xTimerGenericCommand+0x98>)
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f107 0114 	add.w	r1, r7, #20
 800486a:	2300      	movs	r3, #0
 800486c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486e:	f7fe fa4f 	bl	8002d10 <xQueueGenericSend>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24
 8004874:	e012      	b.n	800489c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <xTimerGenericCommand+0x98>)
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f107 0114 	add.w	r1, r7, #20
 800487e:	2300      	movs	r3, #0
 8004880:	2200      	movs	r2, #0
 8004882:	f7fe fa45 	bl	8002d10 <xQueueGenericSend>
 8004886:	6278      	str	r0, [r7, #36]	; 0x24
 8004888:	e008      	b.n	800489c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <xTimerGenericCommand+0x98>)
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f107 0114 	add.w	r1, r7, #20
 8004892:	2300      	movs	r3, #0
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	f7fe fb39 	bl	8002f0c <xQueueGenericSendFromISR>
 800489a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3728      	adds	r7, #40	; 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000034c 	.word	0x2000034c

080048ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af02      	add	r7, sp, #8
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b6:	4b22      	ldr	r3, [pc, #136]	; (8004940 <prvProcessExpiredTimer+0x94>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe f931 	bl	8002b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d022      	beq.n	800491e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	18d1      	adds	r1, r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	6978      	ldr	r0, [r7, #20]
 80048e6:	f000 f8d1 	bl	8004a8c <prvInsertTimerInActiveList>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01f      	beq.n	8004930 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	2100      	movs	r1, #0
 80048fa:	6978      	ldr	r0, [r7, #20]
 80048fc:	f7ff ff88 	bl	8004810 <xTimerGenericCommand>
 8004900:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d113      	bne.n	8004930 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
}
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	b2da      	uxtb	r2, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	4798      	blx	r3
}
 8004938:	bf00      	nop
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000344 	.word	0x20000344

08004944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800494c:	f107 0308 	add.w	r3, r7, #8
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f857 	bl	8004a04 <prvGetNextExpireTime>
 8004956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f803 	bl	8004968 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004962:	f000 f8d5 	bl	8004b10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004966:	e7f1      	b.n	800494c <prvTimerTask+0x8>

08004968 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004972:	f7fe ff71 	bl	8003858 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004976:	f107 0308 	add.w	r3, r7, #8
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f866 	bl	8004a4c <prvSampleTimeNow>
 8004980:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d130      	bne.n	80049ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <prvProcessTimerOrBlockTask+0x3c>
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	429a      	cmp	r2, r3
 8004994:	d806      	bhi.n	80049a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004996:	f7fe ff6d 	bl	8003874 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff85 	bl	80048ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049a2:	e024      	b.n	80049ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <prvProcessTimerOrBlockTask+0x90>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <prvProcessTimerOrBlockTask+0x50>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <prvProcessTimerOrBlockTask+0x52>
 80049b8:	2300      	movs	r3, #0
 80049ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049bc:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <prvProcessTimerOrBlockTask+0x94>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	f7fe fd51 	bl	8003470 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049ce:	f7fe ff51 	bl	8003874 <xTaskResumeAll>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <prvProcessTimerOrBlockTask+0x98>)
 80049da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
}
 80049e8:	e001      	b.n	80049ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049ea:	f7fe ff43 	bl	8003874 <xTaskResumeAll>
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000348 	.word	0x20000348
 80049fc:	2000034c 	.word	0x2000034c
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <prvGetNextExpireTime+0x44>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <prvGetNextExpireTime+0x16>
 8004a16:	2201      	movs	r2, #1
 8004a18:	e000      	b.n	8004a1c <prvGetNextExpireTime+0x18>
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a28:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <prvGetNextExpireTime+0x44>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e001      	b.n	8004a38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a38:	68fb      	ldr	r3, [r7, #12]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000344 	.word	0x20000344

08004a4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a54:	f7fe ffaa 	bl	80039ac <xTaskGetTickCount>
 8004a58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <prvSampleTimeNow+0x3c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d205      	bcs.n	8004a70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a64:	f000 f91a 	bl	8004c9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e002      	b.n	8004a76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a76:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <prvSampleTimeNow+0x3c>)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000354 	.word	0x20000354

08004a8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d812      	bhi.n	8004ad8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad2      	subs	r2, r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e01b      	b.n	8004afe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <prvInsertTimerInActiveList+0x7c>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fd fff2 	bl	8002aba <vListInsert>
 8004ad6:	e012      	b.n	8004afe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d206      	bcs.n	8004aee <prvInsertTimerInActiveList+0x62>
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e007      	b.n	8004afe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <prvInsertTimerInActiveList+0x80>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7fd ffde 	bl	8002aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004afe:	697b      	ldr	r3, [r7, #20]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000348 	.word	0x20000348
 8004b0c:	20000344 	.word	0x20000344

08004b10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	; 0x30
 8004b14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b16:	e0ae      	b.n	8004c76 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f2c0 80ab 	blt.w	8004c76 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fd fffb 	bl	8002b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff87 	bl	8004a4c <prvSampleTimeNow>
 8004b3e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2b09      	cmp	r3, #9
 8004b44:	f200 8096 	bhi.w	8004c74 <prvProcessReceivedCommands+0x164>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <prvProcessReceivedCommands+0x40>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b79 	.word	0x08004b79
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004bed 	.word	0x08004bed
 8004b60:	08004c01 	.word	0x08004c01
 8004b64:	08004c4b 	.word	0x08004c4b
 8004b68:	08004b79 	.word	0x08004b79
 8004b6c:	08004b79 	.word	0x08004b79
 8004b70:	08004bed 	.word	0x08004bed
 8004b74:	08004c01 	.word	0x08004c01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	18d1      	adds	r1, r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b98:	f7ff ff78 	bl	8004a8c <prvInsertTimerInActiveList>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d069      	beq.n	8004c76 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05e      	beq.n	8004c76 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bca:	f7ff fe21 	bl	8004810 <xTimerGenericCommand>
 8004bce:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d14f      	bne.n	8004c76 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	61bb      	str	r3, [r7, #24]
}
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bfe:	e03a      	b.n	8004c76 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	617b      	str	r3, [r7, #20]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	18d1      	adds	r1, r2, r3
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c44:	f7ff ff22 	bl	8004a8c <prvInsertTimerInActiveList>
					break;
 8004c48:	e015      	b.n	8004c76 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c5a:	f000 fbd9 	bl	8005410 <vPortFree>
 8004c5e:	e00a      	b.n	8004c76 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c66:	f023 0301 	bic.w	r3, r3, #1
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c72:	e000      	b.n	8004c76 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8004c74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <prvProcessReceivedCommands+0x188>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f107 0108 	add.w	r1, r7, #8
 8004c7e:	2200      	movs	r2, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe f9db 	bl	800303c <xQueueReceive>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f af45 	bne.w	8004b18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	2000034c 	.word	0x2000034c

08004c9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ca2:	e048      	b.n	8004d36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd ff35 	bl	8002b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d90e      	bls.n	8004d08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fd feda 	bl	8002aba <vListInsert>
 8004d06:	e016      	b.n	8004d36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	2100      	movs	r1, #0
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fd7c 	bl	8004810 <xTimerGenericCommand>
 8004d18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	603b      	str	r3, [r7, #0]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1b1      	bne.n	8004ca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <prvSwitchTimerLists+0xc0>)
 8004d4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d4e:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000344 	.word	0x20000344
 8004d60:	20000348 	.word	0x20000348

08004d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d68:	f000 f96c 	bl	8005044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <prvCheckForValidListAndQueue+0x54>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11d      	bne.n	8004db0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d74:	4811      	ldr	r0, [pc, #68]	; (8004dbc <prvCheckForValidListAndQueue+0x58>)
 8004d76:	f7fd fe4f 	bl	8002a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d7a:	4811      	ldr	r0, [pc, #68]	; (8004dc0 <prvCheckForValidListAndQueue+0x5c>)
 8004d7c:	f7fd fe4c 	bl	8002a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <prvCheckForValidListAndQueue+0x60>)
 8004d82:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <prvCheckForValidListAndQueue+0x58>)
 8004d84:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <prvCheckForValidListAndQueue+0x64>)
 8004d88:	4a0d      	ldr	r2, [pc, #52]	; (8004dc0 <prvCheckForValidListAndQueue+0x5c>)
 8004d8a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	210c      	movs	r1, #12
 8004d90:	200a      	movs	r0, #10
 8004d92:	f7fd ff5d 	bl	8002c50 <xQueueGenericCreate>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4a07      	ldr	r2, [pc, #28]	; (8004db8 <prvCheckForValidListAndQueue+0x54>)
 8004d9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <prvCheckForValidListAndQueue+0x54>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <prvCheckForValidListAndQueue+0x54>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4908      	ldr	r1, [pc, #32]	; (8004dcc <prvCheckForValidListAndQueue+0x68>)
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fb36 	bl	800341c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db0:	f000 f978 	bl	80050a4 <vPortExitCritical>
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	2000034c 	.word	0x2000034c
 8004dbc:	2000031c 	.word	0x2000031c
 8004dc0:	20000330 	.word	0x20000330
 8004dc4:	20000344 	.word	0x20000344
 8004dc8:	20000348 	.word	0x20000348
 8004dcc:	0800613c 	.word	0x0800613c

08004dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b04      	subs	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b04      	subs	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <pxPortInitialiseStack+0x64>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b14      	subs	r3, #20
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f06f 0202 	mvn.w	r2, #2
 8004e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3b20      	subs	r3, #32
 8004e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	08004e39 	.word	0x08004e39

08004e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <prvTaskExitError+0x54>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e4a:	d00a      	beq.n	8004e62 <prvTaskExitError+0x2a>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <prvTaskExitError+0x28>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e76:	bf00      	nop
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0fc      	beq.n	8004e78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	2000000c 	.word	0x2000000c

08004e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <pxCurrentTCBConst2>)
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	6808      	ldr	r0, [r1, #0]
 8004e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	f380 8809 	msr	PSP, r0
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8811 	msr	BASEPRI, r0
 8004eaa:	4770      	bx	lr
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst2>:
 8004eb0:	20000150 	.word	0x20000150
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004eb8:	4808      	ldr	r0, [pc, #32]	; (8004edc <prvPortStartFirstTask+0x24>)
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	6800      	ldr	r0, [r0, #0]
 8004ebe:	f380 8808 	msr	MSP, r0
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8814 	msr	CONTROL, r0
 8004eca:	b662      	cpsie	i
 8004ecc:	b661      	cpsie	f
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	df00      	svc	0
 8004ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eda:	bf00      	nop
 8004edc:	e000ed08 	.word	0xe000ed08

08004ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ee6:	4b4e      	ldr	r3, [pc, #312]	; (8005020 <xPortStartScheduler+0x140>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <xPortStartScheduler+0x144>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10a      	bne.n	8004f06 <xPortStartScheduler+0x26>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61bb      	str	r3, [r7, #24]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <xPortStartScheduler+0x140>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	; (8005028 <xPortStartScheduler+0x148>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x46>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	617b      	str	r3, [r7, #20]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f26:	4b41      	ldr	r3, [pc, #260]	; (800502c <xPortStartScheduler+0x14c>)
 8004f28:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4b39      	ldr	r3, [pc, #228]	; (8005030 <xPortStartScheduler+0x150>)
 8004f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <xPortStartScheduler+0x154>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f54:	e009      	b.n	8004f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <xPortStartScheduler+0x154>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	4a35      	ldr	r2, [pc, #212]	; (8005034 <xPortStartScheduler+0x154>)
 8004f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d0ef      	beq.n	8004f56 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <xPortStartScheduler+0x154>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d00a      	beq.n	8004f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	613b      	str	r3, [r7, #16]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f98:	4b26      	ldr	r3, [pc, #152]	; (8005034 <xPortStartScheduler+0x154>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f1c3 0307 	rsb	r3, r3, #7
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d00a      	beq.n	8004fba <xPortStartScheduler+0xda>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	60fb      	str	r3, [r7, #12]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <xPortStartScheduler+0x154>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <xPortStartScheduler+0x154>)
 8004fc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <xPortStartScheduler+0x154>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fcc:	4a19      	ldr	r2, [pc, #100]	; (8005034 <xPortStartScheduler+0x154>)
 8004fce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fd8:	4b17      	ldr	r3, [pc, #92]	; (8005038 <xPortStartScheduler+0x158>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a16      	ldr	r2, [pc, #88]	; (8005038 <xPortStartScheduler+0x158>)
 8004fde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fe4:	4b14      	ldr	r3, [pc, #80]	; (8005038 <xPortStartScheduler+0x158>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	; (8005038 <xPortStartScheduler+0x158>)
 8004fea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ff0:	f000 f8dc 	bl	80051ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <xPortStartScheduler+0x15c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ffa:	f000 f8fb 	bl	80051f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <xPortStartScheduler+0x160>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <xPortStartScheduler+0x160>)
 8005004:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005008:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800500a:	f7ff ff55 	bl	8004eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800500e:	f7fe fd95 	bl	8003b3c <vTaskSwitchContext>
	prvTaskExitError();
 8005012:	f7ff ff11 	bl	8004e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	e000ed00 	.word	0xe000ed00
 8005024:	410fc271 	.word	0x410fc271
 8005028:	410fc270 	.word	0x410fc270
 800502c:	e000e400 	.word	0xe000e400
 8005030:	20000358 	.word	0x20000358
 8005034:	2000035c 	.word	0x2000035c
 8005038:	e000ed20 	.word	0xe000ed20
 800503c:	2000000c 	.word	0x2000000c
 8005040:	e000ef34 	.word	0xe000ef34

08005044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <vPortEnterCritical+0x58>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <vPortEnterCritical+0x58>)
 8005066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <vPortEnterCritical+0x58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10f      	bne.n	8005090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortEnterCritical+0x5c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <vPortEnterCritical+0x4c>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	603b      	str	r3, [r7, #0]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vPortEnterCritical+0x4a>
	}
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <vPortExitCritical+0x50>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <vPortExitCritical+0x24>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <vPortExitCritical+0x50>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <vPortExitCritical+0x50>)
 80050d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <vPortExitCritical+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <vPortExitCritical+0x42>
 80050da:	2300      	movs	r3, #0
 80050dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f383 8811 	msr	BASEPRI, r3
}
 80050e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	2000000c 	.word	0x2000000c
	...

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f01e 0f10 	tst.w	lr, #16
 8005110:	bf08      	it	eq
 8005112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005124:	f380 8811 	msr	BASEPRI, r0
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f7fe fd04 	bl	8003b3c <vTaskSwitchContext>
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f380 8811 	msr	BASEPRI, r0
 800513c:	bc09      	pop	{r0, r3}
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	6808      	ldr	r0, [r1, #0]
 8005142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005146:	f01e 0f10 	tst.w	lr, #16
 800514a:	bf08      	it	eq
 800514c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005150:	f380 8809 	msr	PSP, r0
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst>:
 8005160:	20000150 	.word	0x20000150
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005182:	f7fe fc23 	bl	80039cc <xTaskIncrementTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SysTick_Handler+0x40>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <vPortSetupTimerInterrupt+0x44>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010
 80051e4:	e000e018 	.word	0xe000e018
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	e000e014 	.word	0xe000e014

080051f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005204 <vPortEnableVFP+0x10>
 80051f8:	6801      	ldr	r1, [r0, #0]
 80051fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051fe:	6001      	str	r1, [r0, #0]
 8005200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005202:	bf00      	nop
 8005204:	e000ed88 	.word	0xe000ed88

08005208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800520e:	f3ef 8305 	mrs	r3, IPSR
 8005212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d914      	bls.n	8005244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800521a:	4a17      	ldr	r2, [pc, #92]	; (8005278 <vPortValidateInterruptPriority+0x70>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <vPortValidateInterruptPriority+0x74>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	7afa      	ldrb	r2, [r7, #11]
 800522a:	429a      	cmp	r2, r3
 800522c:	d20a      	bcs.n	8005244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005244:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <vPortValidateInterruptPriority+0x78>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <vPortValidateInterruptPriority+0x7c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d90a      	bls.n	800526a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	603b      	str	r3, [r7, #0]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <vPortValidateInterruptPriority+0x60>
	}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e3f0 	.word	0xe000e3f0
 800527c:	20000358 	.word	0x20000358
 8005280:	e000ed0c 	.word	0xe000ed0c
 8005284:	2000035c 	.word	0x2000035c

08005288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005294:	f7fe fae0 	bl	8003858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005298:	4b58      	ldr	r3, [pc, #352]	; (80053fc <pvPortMalloc+0x174>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052a0:	f000 f910 	bl	80054c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052a4:	4b56      	ldr	r3, [pc, #344]	; (8005400 <pvPortMalloc+0x178>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 808e 	bne.w	80053ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01d      	beq.n	80052f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052b8:	2208      	movs	r2, #8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4413      	add	r3, r2
 80052be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d014      	beq.n	80052f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f023 0307 	bic.w	r3, r3, #7
 80052d0:	3308      	adds	r3, #8
 80052d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <pvPortMalloc+0x6c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	617b      	str	r3, [r7, #20]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d069      	beq.n	80053ce <pvPortMalloc+0x146>
 80052fa:	4b42      	ldr	r3, [pc, #264]	; (8005404 <pvPortMalloc+0x17c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d864      	bhi.n	80053ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005304:	4b40      	ldr	r3, [pc, #256]	; (8005408 <pvPortMalloc+0x180>)
 8005306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005308:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <pvPortMalloc+0x180>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800530e:	e004      	b.n	800531a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d903      	bls.n	800532c <pvPortMalloc+0xa4>
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f1      	bne.n	8005310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800532c:	4b33      	ldr	r3, [pc, #204]	; (80053fc <pvPortMalloc+0x174>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005332:	429a      	cmp	r2, r3
 8005334:	d04b      	beq.n	80053ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2208      	movs	r2, #8
 800533c:	4413      	add	r3, r2
 800533e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1ad2      	subs	r2, r2, r3
 8005350:	2308      	movs	r3, #8
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d91f      	bls.n	8005398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <pvPortMalloc+0xf8>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	613b      	str	r3, [r7, #16]
}
 800537c:	bf00      	nop
 800537e:	e7fe      	b.n	800537e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	1ad2      	subs	r2, r2, r3
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005392:	69b8      	ldr	r0, [r7, #24]
 8005394:	f000 f8f8 	bl	8005588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005398:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <pvPortMalloc+0x17c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <pvPortMalloc+0x17c>)
 80053a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053a6:	4b17      	ldr	r3, [pc, #92]	; (8005404 <pvPortMalloc+0x17c>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <pvPortMalloc+0x184>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d203      	bcs.n	80053ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053b2:	4b14      	ldr	r3, [pc, #80]	; (8005404 <pvPortMalloc+0x17c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a15      	ldr	r2, [pc, #84]	; (800540c <pvPortMalloc+0x184>)
 80053b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <pvPortMalloc+0x178>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053ce:	f7fe fa51 	bl	8003874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <pvPortMalloc+0x16a>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60fb      	str	r3, [r7, #12]
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <pvPortMalloc+0x168>
	return pvReturn;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3728      	adds	r7, #40	; 0x28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20012f68 	.word	0x20012f68
 8005400:	20012f74 	.word	0x20012f74
 8005404:	20012f6c 	.word	0x20012f6c
 8005408:	20012f60 	.word	0x20012f60
 800540c:	20012f70 	.word	0x20012f70

08005410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d048      	beq.n	80054b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005422:	2308      	movs	r3, #8
 8005424:	425b      	negs	r3, r3
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4b21      	ldr	r3, [pc, #132]	; (80054bc <vPortFree+0xac>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10a      	bne.n	8005454 <vPortFree+0x44>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60fb      	str	r3, [r7, #12]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <vPortFree+0x62>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	60bb      	str	r3, [r7, #8]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4b11      	ldr	r3, [pc, #68]	; (80054bc <vPortFree+0xac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d019      	beq.n	80054b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <vPortFree+0xac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005498:	f7fe f9de 	bl	8003858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <vPortFree+0xb0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <vPortFree+0xb0>)
 80054a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054aa:	6938      	ldr	r0, [r7, #16]
 80054ac:	f000 f86c 	bl	8005588 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054b0:	f7fe f9e0 	bl	8003874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20012f74 	.word	0x20012f74
 80054c0:	20012f6c 	.word	0x20012f6c

080054c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ca:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80054ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <prvHeapInit+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3307      	adds	r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <prvHeapInit+0xac>)
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <prvHeapInit+0xb0>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <prvHeapInit+0xb0>)
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <prvHeapInit+0xb4>)
 8005524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <prvHeapInit+0xb4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvHeapInit+0xb4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <prvHeapInit+0xb8>)
 8005552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <prvHeapInit+0xbc>)
 800555a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <prvHeapInit+0xc0>)
 800555e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000360 	.word	0x20000360
 8005574:	20012f60 	.word	0x20012f60
 8005578:	20012f68 	.word	0x20012f68
 800557c:	20012f70 	.word	0x20012f70
 8005580:	20012f6c 	.word	0x20012f6c
 8005584:	20012f74 	.word	0x20012f74

08005588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <prvInsertBlockIntoFreeList+0xac>)
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <prvInsertBlockIntoFreeList+0x14>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d8f7      	bhi.n	8005596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d108      	bne.n	80055ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d118      	bne.n	8005610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d00d      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e003      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d002      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20012f60 	.word	0x20012f60
 8005638:	20012f68 	.word	0x20012f68

0800563c <__itoa>:
 800563c:	1e93      	subs	r3, r2, #2
 800563e:	2b22      	cmp	r3, #34	; 0x22
 8005640:	b510      	push	{r4, lr}
 8005642:	460c      	mov	r4, r1
 8005644:	d904      	bls.n	8005650 <__itoa+0x14>
 8005646:	2300      	movs	r3, #0
 8005648:	700b      	strb	r3, [r1, #0]
 800564a:	461c      	mov	r4, r3
 800564c:	4620      	mov	r0, r4
 800564e:	bd10      	pop	{r4, pc}
 8005650:	2a0a      	cmp	r2, #10
 8005652:	d109      	bne.n	8005668 <__itoa+0x2c>
 8005654:	2800      	cmp	r0, #0
 8005656:	da07      	bge.n	8005668 <__itoa+0x2c>
 8005658:	232d      	movs	r3, #45	; 0x2d
 800565a:	700b      	strb	r3, [r1, #0]
 800565c:	4240      	negs	r0, r0
 800565e:	2101      	movs	r1, #1
 8005660:	4421      	add	r1, r4
 8005662:	f000 f825 	bl	80056b0 <__utoa>
 8005666:	e7f1      	b.n	800564c <__itoa+0x10>
 8005668:	2100      	movs	r1, #0
 800566a:	e7f9      	b.n	8005660 <__itoa+0x24>

0800566c <itoa>:
 800566c:	f7ff bfe6 	b.w	800563c <__itoa>

08005670 <siprintf>:
 8005670:	b40e      	push	{r1, r2, r3}
 8005672:	b500      	push	{lr}
 8005674:	b09c      	sub	sp, #112	; 0x70
 8005676:	ab1d      	add	r3, sp, #116	; 0x74
 8005678:	9002      	str	r0, [sp, #8]
 800567a:	9006      	str	r0, [sp, #24]
 800567c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005680:	4809      	ldr	r0, [pc, #36]	; (80056a8 <siprintf+0x38>)
 8005682:	9107      	str	r1, [sp, #28]
 8005684:	9104      	str	r1, [sp, #16]
 8005686:	4909      	ldr	r1, [pc, #36]	; (80056ac <siprintf+0x3c>)
 8005688:	f853 2b04 	ldr.w	r2, [r3], #4
 800568c:	9105      	str	r1, [sp, #20]
 800568e:	6800      	ldr	r0, [r0, #0]
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	a902      	add	r1, sp, #8
 8005694:	f000 f902 	bl	800589c <_svfiprintf_r>
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	b01c      	add	sp, #112	; 0x70
 80056a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a4:	b003      	add	sp, #12
 80056a6:	4770      	bx	lr
 80056a8:	2000005c 	.word	0x2000005c
 80056ac:	ffff0208 	.word	0xffff0208

080056b0 <__utoa>:
 80056b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b2:	4c1f      	ldr	r4, [pc, #124]	; (8005730 <__utoa+0x80>)
 80056b4:	b08b      	sub	sp, #44	; 0x2c
 80056b6:	4605      	mov	r5, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	466e      	mov	r6, sp
 80056bc:	f104 0c20 	add.w	ip, r4, #32
 80056c0:	6820      	ldr	r0, [r4, #0]
 80056c2:	6861      	ldr	r1, [r4, #4]
 80056c4:	4637      	mov	r7, r6
 80056c6:	c703      	stmia	r7!, {r0, r1}
 80056c8:	3408      	adds	r4, #8
 80056ca:	4564      	cmp	r4, ip
 80056cc:	463e      	mov	r6, r7
 80056ce:	d1f7      	bne.n	80056c0 <__utoa+0x10>
 80056d0:	7921      	ldrb	r1, [r4, #4]
 80056d2:	7139      	strb	r1, [r7, #4]
 80056d4:	1e91      	subs	r1, r2, #2
 80056d6:	6820      	ldr	r0, [r4, #0]
 80056d8:	6038      	str	r0, [r7, #0]
 80056da:	2922      	cmp	r1, #34	; 0x22
 80056dc:	f04f 0100 	mov.w	r1, #0
 80056e0:	d904      	bls.n	80056ec <__utoa+0x3c>
 80056e2:	7019      	strb	r1, [r3, #0]
 80056e4:	460b      	mov	r3, r1
 80056e6:	4618      	mov	r0, r3
 80056e8:	b00b      	add	sp, #44	; 0x2c
 80056ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ec:	1e58      	subs	r0, r3, #1
 80056ee:	4684      	mov	ip, r0
 80056f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80056f4:	fb02 5617 	mls	r6, r2, r7, r5
 80056f8:	3628      	adds	r6, #40	; 0x28
 80056fa:	446e      	add	r6, sp
 80056fc:	460c      	mov	r4, r1
 80056fe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005702:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005706:	462e      	mov	r6, r5
 8005708:	42b2      	cmp	r2, r6
 800570a:	f101 0101 	add.w	r1, r1, #1
 800570e:	463d      	mov	r5, r7
 8005710:	d9ee      	bls.n	80056f0 <__utoa+0x40>
 8005712:	2200      	movs	r2, #0
 8005714:	545a      	strb	r2, [r3, r1]
 8005716:	1919      	adds	r1, r3, r4
 8005718:	1aa5      	subs	r5, r4, r2
 800571a:	42aa      	cmp	r2, r5
 800571c:	dae3      	bge.n	80056e6 <__utoa+0x36>
 800571e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005722:	780e      	ldrb	r6, [r1, #0]
 8005724:	7006      	strb	r6, [r0, #0]
 8005726:	3201      	adds	r2, #1
 8005728:	f801 5901 	strb.w	r5, [r1], #-1
 800572c:	e7f4      	b.n	8005718 <__utoa+0x68>
 800572e:	bf00      	nop
 8005730:	0800615c 	.word	0x0800615c

08005734 <strcat>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4602      	mov	r2, r0
 8005738:	7814      	ldrb	r4, [r2, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	3201      	adds	r2, #1
 800573e:	2c00      	cmp	r4, #0
 8005740:	d1fa      	bne.n	8005738 <strcat+0x4>
 8005742:	3b01      	subs	r3, #1
 8005744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005748:	f803 2f01 	strb.w	r2, [r3, #1]!
 800574c:	2a00      	cmp	r2, #0
 800574e:	d1f9      	bne.n	8005744 <strcat+0x10>
 8005750:	bd10      	pop	{r4, pc}

08005752 <memset>:
 8005752:	4402      	add	r2, r0
 8005754:	4603      	mov	r3, r0
 8005756:	4293      	cmp	r3, r2
 8005758:	d100      	bne.n	800575c <memset+0xa>
 800575a:	4770      	bx	lr
 800575c:	f803 1b01 	strb.w	r1, [r3], #1
 8005760:	e7f9      	b.n	8005756 <memset+0x4>
	...

08005764 <__errno>:
 8005764:	4b01      	ldr	r3, [pc, #4]	; (800576c <__errno+0x8>)
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	2000005c 	.word	0x2000005c

08005770 <__libc_init_array>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4d0d      	ldr	r5, [pc, #52]	; (80057a8 <__libc_init_array+0x38>)
 8005774:	4c0d      	ldr	r4, [pc, #52]	; (80057ac <__libc_init_array+0x3c>)
 8005776:	1b64      	subs	r4, r4, r5
 8005778:	10a4      	asrs	r4, r4, #2
 800577a:	2600      	movs	r6, #0
 800577c:	42a6      	cmp	r6, r4
 800577e:	d109      	bne.n	8005794 <__libc_init_array+0x24>
 8005780:	4d0b      	ldr	r5, [pc, #44]	; (80057b0 <__libc_init_array+0x40>)
 8005782:	4c0c      	ldr	r4, [pc, #48]	; (80057b4 <__libc_init_array+0x44>)
 8005784:	f000 fc72 	bl	800606c <_init>
 8005788:	1b64      	subs	r4, r4, r5
 800578a:	10a4      	asrs	r4, r4, #2
 800578c:	2600      	movs	r6, #0
 800578e:	42a6      	cmp	r6, r4
 8005790:	d105      	bne.n	800579e <__libc_init_array+0x2e>
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	f855 3b04 	ldr.w	r3, [r5], #4
 8005798:	4798      	blx	r3
 800579a:	3601      	adds	r6, #1
 800579c:	e7ee      	b.n	800577c <__libc_init_array+0xc>
 800579e:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a2:	4798      	blx	r3
 80057a4:	3601      	adds	r6, #1
 80057a6:	e7f2      	b.n	800578e <__libc_init_array+0x1e>
 80057a8:	080061bc 	.word	0x080061bc
 80057ac:	080061bc 	.word	0x080061bc
 80057b0:	080061bc 	.word	0x080061bc
 80057b4:	080061c0 	.word	0x080061c0

080057b8 <__retarget_lock_acquire_recursive>:
 80057b8:	4770      	bx	lr

080057ba <__retarget_lock_release_recursive>:
 80057ba:	4770      	bx	lr

080057bc <memcpy>:
 80057bc:	440a      	add	r2, r1
 80057be:	4291      	cmp	r1, r2
 80057c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057c4:	d100      	bne.n	80057c8 <memcpy+0xc>
 80057c6:	4770      	bx	lr
 80057c8:	b510      	push	{r4, lr}
 80057ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057d2:	4291      	cmp	r1, r2
 80057d4:	d1f9      	bne.n	80057ca <memcpy+0xe>
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <strcpy>:
 80057d8:	4603      	mov	r3, r0
 80057da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057de:	f803 2b01 	strb.w	r2, [r3], #1
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d1f9      	bne.n	80057da <strcpy+0x2>
 80057e6:	4770      	bx	lr

080057e8 <__ssputs_r>:
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	688e      	ldr	r6, [r1, #8]
 80057ee:	461f      	mov	r7, r3
 80057f0:	42be      	cmp	r6, r7
 80057f2:	680b      	ldr	r3, [r1, #0]
 80057f4:	4682      	mov	sl, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	4690      	mov	r8, r2
 80057fa:	d82c      	bhi.n	8005856 <__ssputs_r+0x6e>
 80057fc:	898a      	ldrh	r2, [r1, #12]
 80057fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005802:	d026      	beq.n	8005852 <__ssputs_r+0x6a>
 8005804:	6965      	ldr	r5, [r4, #20]
 8005806:	6909      	ldr	r1, [r1, #16]
 8005808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580c:	eba3 0901 	sub.w	r9, r3, r1
 8005810:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005814:	1c7b      	adds	r3, r7, #1
 8005816:	444b      	add	r3, r9
 8005818:	106d      	asrs	r5, r5, #1
 800581a:	429d      	cmp	r5, r3
 800581c:	bf38      	it	cc
 800581e:	461d      	movcc	r5, r3
 8005820:	0553      	lsls	r3, r2, #21
 8005822:	d527      	bpl.n	8005874 <__ssputs_r+0x8c>
 8005824:	4629      	mov	r1, r5
 8005826:	f000 f957 	bl	8005ad8 <_malloc_r>
 800582a:	4606      	mov	r6, r0
 800582c:	b360      	cbz	r0, 8005888 <__ssputs_r+0xa0>
 800582e:	6921      	ldr	r1, [r4, #16]
 8005830:	464a      	mov	r2, r9
 8005832:	f7ff ffc3 	bl	80057bc <memcpy>
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800583c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	6126      	str	r6, [r4, #16]
 8005844:	6165      	str	r5, [r4, #20]
 8005846:	444e      	add	r6, r9
 8005848:	eba5 0509 	sub.w	r5, r5, r9
 800584c:	6026      	str	r6, [r4, #0]
 800584e:	60a5      	str	r5, [r4, #8]
 8005850:	463e      	mov	r6, r7
 8005852:	42be      	cmp	r6, r7
 8005854:	d900      	bls.n	8005858 <__ssputs_r+0x70>
 8005856:	463e      	mov	r6, r7
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	4632      	mov	r2, r6
 800585c:	4641      	mov	r1, r8
 800585e:	f000 fb86 	bl	8005f6e <memmove>
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	1b9b      	subs	r3, r3, r6
 8005866:	60a3      	str	r3, [r4, #8]
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	4433      	add	r3, r6
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	2000      	movs	r0, #0
 8005870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005874:	462a      	mov	r2, r5
 8005876:	f000 fb4b 	bl	8005f10 <_realloc_r>
 800587a:	4606      	mov	r6, r0
 800587c:	2800      	cmp	r0, #0
 800587e:	d1e0      	bne.n	8005842 <__ssputs_r+0x5a>
 8005880:	6921      	ldr	r1, [r4, #16]
 8005882:	4650      	mov	r0, sl
 8005884:	f000 fb9e 	bl	8005fc4 <_free_r>
 8005888:	230c      	movs	r3, #12
 800588a:	f8ca 3000 	str.w	r3, [sl]
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005894:	81a3      	strh	r3, [r4, #12]
 8005896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800589a:	e7e9      	b.n	8005870 <__ssputs_r+0x88>

0800589c <_svfiprintf_r>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	4698      	mov	r8, r3
 80058a2:	898b      	ldrh	r3, [r1, #12]
 80058a4:	061b      	lsls	r3, r3, #24
 80058a6:	b09d      	sub	sp, #116	; 0x74
 80058a8:	4607      	mov	r7, r0
 80058aa:	460d      	mov	r5, r1
 80058ac:	4614      	mov	r4, r2
 80058ae:	d50e      	bpl.n	80058ce <_svfiprintf_r+0x32>
 80058b0:	690b      	ldr	r3, [r1, #16]
 80058b2:	b963      	cbnz	r3, 80058ce <_svfiprintf_r+0x32>
 80058b4:	2140      	movs	r1, #64	; 0x40
 80058b6:	f000 f90f 	bl	8005ad8 <_malloc_r>
 80058ba:	6028      	str	r0, [r5, #0]
 80058bc:	6128      	str	r0, [r5, #16]
 80058be:	b920      	cbnz	r0, 80058ca <_svfiprintf_r+0x2e>
 80058c0:	230c      	movs	r3, #12
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c8:	e0d0      	b.n	8005a6c <_svfiprintf_r+0x1d0>
 80058ca:	2340      	movs	r3, #64	; 0x40
 80058cc:	616b      	str	r3, [r5, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	9309      	str	r3, [sp, #36]	; 0x24
 80058d2:	2320      	movs	r3, #32
 80058d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058dc:	2330      	movs	r3, #48	; 0x30
 80058de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a84 <_svfiprintf_r+0x1e8>
 80058e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e6:	f04f 0901 	mov.w	r9, #1
 80058ea:	4623      	mov	r3, r4
 80058ec:	469a      	mov	sl, r3
 80058ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f2:	b10a      	cbz	r2, 80058f8 <_svfiprintf_r+0x5c>
 80058f4:	2a25      	cmp	r2, #37	; 0x25
 80058f6:	d1f9      	bne.n	80058ec <_svfiprintf_r+0x50>
 80058f8:	ebba 0b04 	subs.w	fp, sl, r4
 80058fc:	d00b      	beq.n	8005916 <_svfiprintf_r+0x7a>
 80058fe:	465b      	mov	r3, fp
 8005900:	4622      	mov	r2, r4
 8005902:	4629      	mov	r1, r5
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff ff6f 	bl	80057e8 <__ssputs_r>
 800590a:	3001      	adds	r0, #1
 800590c:	f000 80a9 	beq.w	8005a62 <_svfiprintf_r+0x1c6>
 8005910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005912:	445a      	add	r2, fp
 8005914:	9209      	str	r2, [sp, #36]	; 0x24
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80a1 	beq.w	8005a62 <_svfiprintf_r+0x1c6>
 8005920:	2300      	movs	r3, #0
 8005922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005926:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800592a:	f10a 0a01 	add.w	sl, sl, #1
 800592e:	9304      	str	r3, [sp, #16]
 8005930:	9307      	str	r3, [sp, #28]
 8005932:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005936:	931a      	str	r3, [sp, #104]	; 0x68
 8005938:	4654      	mov	r4, sl
 800593a:	2205      	movs	r2, #5
 800593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005940:	4850      	ldr	r0, [pc, #320]	; (8005a84 <_svfiprintf_r+0x1e8>)
 8005942:	f7fa fc4d 	bl	80001e0 <memchr>
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	b9d8      	cbnz	r0, 8005982 <_svfiprintf_r+0xe6>
 800594a:	06d0      	lsls	r0, r2, #27
 800594c:	bf44      	itt	mi
 800594e:	2320      	movmi	r3, #32
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005954:	0711      	lsls	r1, r2, #28
 8005956:	bf44      	itt	mi
 8005958:	232b      	movmi	r3, #43	; 0x2b
 800595a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595e:	f89a 3000 	ldrb.w	r3, [sl]
 8005962:	2b2a      	cmp	r3, #42	; 0x2a
 8005964:	d015      	beq.n	8005992 <_svfiprintf_r+0xf6>
 8005966:	9a07      	ldr	r2, [sp, #28]
 8005968:	4654      	mov	r4, sl
 800596a:	2000      	movs	r0, #0
 800596c:	f04f 0c0a 	mov.w	ip, #10
 8005970:	4621      	mov	r1, r4
 8005972:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005976:	3b30      	subs	r3, #48	; 0x30
 8005978:	2b09      	cmp	r3, #9
 800597a:	d94d      	bls.n	8005a18 <_svfiprintf_r+0x17c>
 800597c:	b1b0      	cbz	r0, 80059ac <_svfiprintf_r+0x110>
 800597e:	9207      	str	r2, [sp, #28]
 8005980:	e014      	b.n	80059ac <_svfiprintf_r+0x110>
 8005982:	eba0 0308 	sub.w	r3, r0, r8
 8005986:	fa09 f303 	lsl.w	r3, r9, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	46a2      	mov	sl, r4
 8005990:	e7d2      	b.n	8005938 <_svfiprintf_r+0x9c>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	1d19      	adds	r1, r3, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	9103      	str	r1, [sp, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bfbb      	ittet	lt
 800599e:	425b      	neglt	r3, r3
 80059a0:	f042 0202 	orrlt.w	r2, r2, #2
 80059a4:	9307      	strge	r3, [sp, #28]
 80059a6:	9307      	strlt	r3, [sp, #28]
 80059a8:	bfb8      	it	lt
 80059aa:	9204      	strlt	r2, [sp, #16]
 80059ac:	7823      	ldrb	r3, [r4, #0]
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d10c      	bne.n	80059cc <_svfiprintf_r+0x130>
 80059b2:	7863      	ldrb	r3, [r4, #1]
 80059b4:	2b2a      	cmp	r3, #42	; 0x2a
 80059b6:	d134      	bne.n	8005a22 <_svfiprintf_r+0x186>
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	1d1a      	adds	r2, r3, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bfb8      	it	lt
 80059c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059c8:	3402      	adds	r4, #2
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a94 <_svfiprintf_r+0x1f8>
 80059d0:	7821      	ldrb	r1, [r4, #0]
 80059d2:	2203      	movs	r2, #3
 80059d4:	4650      	mov	r0, sl
 80059d6:	f7fa fc03 	bl	80001e0 <memchr>
 80059da:	b138      	cbz	r0, 80059ec <_svfiprintf_r+0x150>
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	eba0 000a 	sub.w	r0, r0, sl
 80059e2:	2240      	movs	r2, #64	; 0x40
 80059e4:	4082      	lsls	r2, r0
 80059e6:	4313      	orrs	r3, r2
 80059e8:	3401      	adds	r4, #1
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	4825      	ldr	r0, [pc, #148]	; (8005a88 <_svfiprintf_r+0x1ec>)
 80059f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f6:	2206      	movs	r2, #6
 80059f8:	f7fa fbf2 	bl	80001e0 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d038      	beq.n	8005a72 <_svfiprintf_r+0x1d6>
 8005a00:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <_svfiprintf_r+0x1f0>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_svfiprintf_r+0x1b0>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	4433      	add	r3, r6
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	e768      	b.n	80058ea <_svfiprintf_r+0x4e>
 8005a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	2001      	movs	r0, #1
 8005a20:	e7a6      	b.n	8005970 <_svfiprintf_r+0xd4>
 8005a22:	2300      	movs	r3, #0
 8005a24:	3401      	adds	r4, #1
 8005a26:	9305      	str	r3, [sp, #20]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f04f 0c0a 	mov.w	ip, #10
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	; 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_svfiprintf_r+0x1a6>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c6      	beq.n	80059cc <_svfiprintf_r+0x130>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c4      	b.n	80059cc <_svfiprintf_r+0x130>
 8005a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a46:	4604      	mov	r4, r0
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e7f0      	b.n	8005a2e <_svfiprintf_r+0x192>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	462a      	mov	r2, r5
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <_svfiprintf_r+0x1f4>)
 8005a54:	a904      	add	r1, sp, #16
 8005a56:	4638      	mov	r0, r7
 8005a58:	f3af 8000 	nop.w
 8005a5c:	1c42      	adds	r2, r0, #1
 8005a5e:	4606      	mov	r6, r0
 8005a60:	d1d6      	bne.n	8005a10 <_svfiprintf_r+0x174>
 8005a62:	89ab      	ldrh	r3, [r5, #12]
 8005a64:	065b      	lsls	r3, r3, #25
 8005a66:	f53f af2d 	bmi.w	80058c4 <_svfiprintf_r+0x28>
 8005a6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a6c:	b01d      	add	sp, #116	; 0x74
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	ab03      	add	r3, sp, #12
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	462a      	mov	r2, r5
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <_svfiprintf_r+0x1f4>)
 8005a7a:	a904      	add	r1, sp, #16
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	f000 f919 	bl	8005cb4 <_printf_i>
 8005a82:	e7eb      	b.n	8005a5c <_svfiprintf_r+0x1c0>
 8005a84:	08006181 	.word	0x08006181
 8005a88:	0800618b 	.word	0x0800618b
 8005a8c:	00000000 	.word	0x00000000
 8005a90:	080057e9 	.word	0x080057e9
 8005a94:	08006187 	.word	0x08006187

08005a98 <sbrk_aligned>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4e0e      	ldr	r6, [pc, #56]	; (8005ad4 <sbrk_aligned+0x3c>)
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	6831      	ldr	r1, [r6, #0]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	b911      	cbnz	r1, 8005aaa <sbrk_aligned+0x12>
 8005aa4:	f000 fa7e 	bl	8005fa4 <_sbrk_r>
 8005aa8:	6030      	str	r0, [r6, #0]
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 fa79 	bl	8005fa4 <_sbrk_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d00a      	beq.n	8005acc <sbrk_aligned+0x34>
 8005ab6:	1cc4      	adds	r4, r0, #3
 8005ab8:	f024 0403 	bic.w	r4, r4, #3
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d007      	beq.n	8005ad0 <sbrk_aligned+0x38>
 8005ac0:	1a21      	subs	r1, r4, r0
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f000 fa6e 	bl	8005fa4 <_sbrk_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d101      	bne.n	8005ad0 <sbrk_aligned+0x38>
 8005acc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	200130b8 	.word	0x200130b8

08005ad8 <_malloc_r>:
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	1ccd      	adds	r5, r1, #3
 8005ade:	f025 0503 	bic.w	r5, r5, #3
 8005ae2:	3508      	adds	r5, #8
 8005ae4:	2d0c      	cmp	r5, #12
 8005ae6:	bf38      	it	cc
 8005ae8:	250c      	movcc	r5, #12
 8005aea:	2d00      	cmp	r5, #0
 8005aec:	4607      	mov	r7, r0
 8005aee:	db01      	blt.n	8005af4 <_malloc_r+0x1c>
 8005af0:	42a9      	cmp	r1, r5
 8005af2:	d905      	bls.n	8005b00 <_malloc_r+0x28>
 8005af4:	230c      	movs	r3, #12
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	2600      	movs	r6, #0
 8005afa:	4630      	mov	r0, r6
 8005afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bd4 <_malloc_r+0xfc>
 8005b04:	f000 f9f8 	bl	8005ef8 <__malloc_lock>
 8005b08:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0c:	461c      	mov	r4, r3
 8005b0e:	bb5c      	cbnz	r4, 8005b68 <_malloc_r+0x90>
 8005b10:	4629      	mov	r1, r5
 8005b12:	4638      	mov	r0, r7
 8005b14:	f7ff ffc0 	bl	8005a98 <sbrk_aligned>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	d155      	bne.n	8005bca <_malloc_r+0xf2>
 8005b1e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b22:	4626      	mov	r6, r4
 8005b24:	2e00      	cmp	r6, #0
 8005b26:	d145      	bne.n	8005bb4 <_malloc_r+0xdc>
 8005b28:	2c00      	cmp	r4, #0
 8005b2a:	d048      	beq.n	8005bbe <_malloc_r+0xe6>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4638      	mov	r0, r7
 8005b32:	eb04 0903 	add.w	r9, r4, r3
 8005b36:	f000 fa35 	bl	8005fa4 <_sbrk_r>
 8005b3a:	4581      	cmp	r9, r0
 8005b3c:	d13f      	bne.n	8005bbe <_malloc_r+0xe6>
 8005b3e:	6821      	ldr	r1, [r4, #0]
 8005b40:	1a6d      	subs	r5, r5, r1
 8005b42:	4629      	mov	r1, r5
 8005b44:	4638      	mov	r0, r7
 8005b46:	f7ff ffa7 	bl	8005a98 <sbrk_aligned>
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d037      	beq.n	8005bbe <_malloc_r+0xe6>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	442b      	add	r3, r5
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	f8d8 3000 	ldr.w	r3, [r8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d038      	beq.n	8005bce <_malloc_r+0xf6>
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	42a2      	cmp	r2, r4
 8005b60:	d12b      	bne.n	8005bba <_malloc_r+0xe2>
 8005b62:	2200      	movs	r2, #0
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	e00f      	b.n	8005b88 <_malloc_r+0xb0>
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	1b52      	subs	r2, r2, r5
 8005b6c:	d41f      	bmi.n	8005bae <_malloc_r+0xd6>
 8005b6e:	2a0b      	cmp	r2, #11
 8005b70:	d917      	bls.n	8005ba2 <_malloc_r+0xca>
 8005b72:	1961      	adds	r1, r4, r5
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	6025      	str	r5, [r4, #0]
 8005b78:	bf18      	it	ne
 8005b7a:	6059      	strne	r1, [r3, #4]
 8005b7c:	6863      	ldr	r3, [r4, #4]
 8005b7e:	bf08      	it	eq
 8005b80:	f8c8 1000 	streq.w	r1, [r8]
 8005b84:	5162      	str	r2, [r4, r5]
 8005b86:	604b      	str	r3, [r1, #4]
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f104 060b 	add.w	r6, r4, #11
 8005b8e:	f000 f9b9 	bl	8005f04 <__malloc_unlock>
 8005b92:	f026 0607 	bic.w	r6, r6, #7
 8005b96:	1d23      	adds	r3, r4, #4
 8005b98:	1af2      	subs	r2, r6, r3
 8005b9a:	d0ae      	beq.n	8005afa <_malloc_r+0x22>
 8005b9c:	1b9b      	subs	r3, r3, r6
 8005b9e:	50a3      	str	r3, [r4, r2]
 8005ba0:	e7ab      	b.n	8005afa <_malloc_r+0x22>
 8005ba2:	42a3      	cmp	r3, r4
 8005ba4:	6862      	ldr	r2, [r4, #4]
 8005ba6:	d1dd      	bne.n	8005b64 <_malloc_r+0x8c>
 8005ba8:	f8c8 2000 	str.w	r2, [r8]
 8005bac:	e7ec      	b.n	8005b88 <_malloc_r+0xb0>
 8005bae:	4623      	mov	r3, r4
 8005bb0:	6864      	ldr	r4, [r4, #4]
 8005bb2:	e7ac      	b.n	8005b0e <_malloc_r+0x36>
 8005bb4:	4634      	mov	r4, r6
 8005bb6:	6876      	ldr	r6, [r6, #4]
 8005bb8:	e7b4      	b.n	8005b24 <_malloc_r+0x4c>
 8005bba:	4613      	mov	r3, r2
 8005bbc:	e7cc      	b.n	8005b58 <_malloc_r+0x80>
 8005bbe:	230c      	movs	r3, #12
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f000 f99e 	bl	8005f04 <__malloc_unlock>
 8005bc8:	e797      	b.n	8005afa <_malloc_r+0x22>
 8005bca:	6025      	str	r5, [r4, #0]
 8005bcc:	e7dc      	b.n	8005b88 <_malloc_r+0xb0>
 8005bce:	605b      	str	r3, [r3, #4]
 8005bd0:	deff      	udf	#255	; 0xff
 8005bd2:	bf00      	nop
 8005bd4:	200130b4 	.word	0x200130b4

08005bd8 <_printf_common>:
 8005bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	4616      	mov	r6, r2
 8005bde:	4699      	mov	r9, r3
 8005be0:	688a      	ldr	r2, [r1, #8]
 8005be2:	690b      	ldr	r3, [r1, #16]
 8005be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be8:	4293      	cmp	r3, r2
 8005bea:	bfb8      	it	lt
 8005bec:	4613      	movlt	r3, r2
 8005bee:	6033      	str	r3, [r6, #0]
 8005bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf4:	4607      	mov	r7, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	b10a      	cbz	r2, 8005bfe <_printf_common+0x26>
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	0699      	lsls	r1, r3, #26
 8005c02:	bf42      	ittt	mi
 8005c04:	6833      	ldrmi	r3, [r6, #0]
 8005c06:	3302      	addmi	r3, #2
 8005c08:	6033      	strmi	r3, [r6, #0]
 8005c0a:	6825      	ldr	r5, [r4, #0]
 8005c0c:	f015 0506 	ands.w	r5, r5, #6
 8005c10:	d106      	bne.n	8005c20 <_printf_common+0x48>
 8005c12:	f104 0a19 	add.w	sl, r4, #25
 8005c16:	68e3      	ldr	r3, [r4, #12]
 8005c18:	6832      	ldr	r2, [r6, #0]
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	42ab      	cmp	r3, r5
 8005c1e:	dc26      	bgt.n	8005c6e <_printf_common+0x96>
 8005c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c24:	1e13      	subs	r3, r2, #0
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	bf18      	it	ne
 8005c2a:	2301      	movne	r3, #1
 8005c2c:	0692      	lsls	r2, r2, #26
 8005c2e:	d42b      	bmi.n	8005c88 <_printf_common+0xb0>
 8005c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c34:	4649      	mov	r1, r9
 8005c36:	4638      	mov	r0, r7
 8005c38:	47c0      	blx	r8
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d01e      	beq.n	8005c7c <_printf_common+0xa4>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	6922      	ldr	r2, [r4, #16]
 8005c42:	f003 0306 	and.w	r3, r3, #6
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	bf02      	ittt	eq
 8005c4a:	68e5      	ldreq	r5, [r4, #12]
 8005c4c:	6833      	ldreq	r3, [r6, #0]
 8005c4e:	1aed      	subeq	r5, r5, r3
 8005c50:	68a3      	ldr	r3, [r4, #8]
 8005c52:	bf0c      	ite	eq
 8005c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c58:	2500      	movne	r5, #0
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	bfc4      	itt	gt
 8005c5e:	1a9b      	subgt	r3, r3, r2
 8005c60:	18ed      	addgt	r5, r5, r3
 8005c62:	2600      	movs	r6, #0
 8005c64:	341a      	adds	r4, #26
 8005c66:	42b5      	cmp	r5, r6
 8005c68:	d11a      	bne.n	8005ca0 <_printf_common+0xc8>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e008      	b.n	8005c80 <_printf_common+0xa8>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4652      	mov	r2, sl
 8005c72:	4649      	mov	r1, r9
 8005c74:	4638      	mov	r0, r7
 8005c76:	47c0      	blx	r8
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d103      	bne.n	8005c84 <_printf_common+0xac>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c84:	3501      	adds	r5, #1
 8005c86:	e7c6      	b.n	8005c16 <_printf_common+0x3e>
 8005c88:	18e1      	adds	r1, r4, r3
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	2030      	movs	r0, #48	; 0x30
 8005c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c92:	4422      	add	r2, r4
 8005c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	e7c7      	b.n	8005c30 <_printf_common+0x58>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c0      	blx	r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	d0e6      	beq.n	8005c7c <_printf_common+0xa4>
 8005cae:	3601      	adds	r6, #1
 8005cb0:	e7d9      	b.n	8005c66 <_printf_common+0x8e>
	...

08005cb4 <_printf_i>:
 8005cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb8:	7e0f      	ldrb	r7, [r1, #24]
 8005cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cbc:	2f78      	cmp	r7, #120	; 0x78
 8005cbe:	4691      	mov	r9, r2
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	469a      	mov	sl, r3
 8005cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cca:	d807      	bhi.n	8005cdc <_printf_i+0x28>
 8005ccc:	2f62      	cmp	r7, #98	; 0x62
 8005cce:	d80a      	bhi.n	8005ce6 <_printf_i+0x32>
 8005cd0:	2f00      	cmp	r7, #0
 8005cd2:	f000 80d4 	beq.w	8005e7e <_printf_i+0x1ca>
 8005cd6:	2f58      	cmp	r7, #88	; 0x58
 8005cd8:	f000 80c0 	beq.w	8005e5c <_printf_i+0x1a8>
 8005cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce4:	e03a      	b.n	8005d5c <_printf_i+0xa8>
 8005ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cea:	2b15      	cmp	r3, #21
 8005cec:	d8f6      	bhi.n	8005cdc <_printf_i+0x28>
 8005cee:	a101      	add	r1, pc, #4	; (adr r1, 8005cf4 <_printf_i+0x40>)
 8005cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cf4:	08005d4d 	.word	0x08005d4d
 8005cf8:	08005d61 	.word	0x08005d61
 8005cfc:	08005cdd 	.word	0x08005cdd
 8005d00:	08005cdd 	.word	0x08005cdd
 8005d04:	08005cdd 	.word	0x08005cdd
 8005d08:	08005cdd 	.word	0x08005cdd
 8005d0c:	08005d61 	.word	0x08005d61
 8005d10:	08005cdd 	.word	0x08005cdd
 8005d14:	08005cdd 	.word	0x08005cdd
 8005d18:	08005cdd 	.word	0x08005cdd
 8005d1c:	08005cdd 	.word	0x08005cdd
 8005d20:	08005e65 	.word	0x08005e65
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005e1f 	.word	0x08005e1f
 8005d2c:	08005cdd 	.word	0x08005cdd
 8005d30:	08005cdd 	.word	0x08005cdd
 8005d34:	08005e87 	.word	0x08005e87
 8005d38:	08005cdd 	.word	0x08005cdd
 8005d3c:	08005d8d 	.word	0x08005d8d
 8005d40:	08005cdd 	.word	0x08005cdd
 8005d44:	08005cdd 	.word	0x08005cdd
 8005d48:	08005e27 	.word	0x08005e27
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	1d1a      	adds	r2, r3, #4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	602a      	str	r2, [r5, #0]
 8005d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e09f      	b.n	8005ea0 <_printf_i+0x1ec>
 8005d60:	6820      	ldr	r0, [r4, #0]
 8005d62:	682b      	ldr	r3, [r5, #0]
 8005d64:	0607      	lsls	r7, r0, #24
 8005d66:	f103 0104 	add.w	r1, r3, #4
 8005d6a:	6029      	str	r1, [r5, #0]
 8005d6c:	d501      	bpl.n	8005d72 <_printf_i+0xbe>
 8005d6e:	681e      	ldr	r6, [r3, #0]
 8005d70:	e003      	b.n	8005d7a <_printf_i+0xc6>
 8005d72:	0646      	lsls	r6, r0, #25
 8005d74:	d5fb      	bpl.n	8005d6e <_printf_i+0xba>
 8005d76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	da03      	bge.n	8005d86 <_printf_i+0xd2>
 8005d7e:	232d      	movs	r3, #45	; 0x2d
 8005d80:	4276      	negs	r6, r6
 8005d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d86:	485a      	ldr	r0, [pc, #360]	; (8005ef0 <_printf_i+0x23c>)
 8005d88:	230a      	movs	r3, #10
 8005d8a:	e012      	b.n	8005db2 <_printf_i+0xfe>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	6820      	ldr	r0, [r4, #0]
 8005d90:	1d19      	adds	r1, r3, #4
 8005d92:	6029      	str	r1, [r5, #0]
 8005d94:	0605      	lsls	r5, r0, #24
 8005d96:	d501      	bpl.n	8005d9c <_printf_i+0xe8>
 8005d98:	681e      	ldr	r6, [r3, #0]
 8005d9a:	e002      	b.n	8005da2 <_printf_i+0xee>
 8005d9c:	0641      	lsls	r1, r0, #25
 8005d9e:	d5fb      	bpl.n	8005d98 <_printf_i+0xe4>
 8005da0:	881e      	ldrh	r6, [r3, #0]
 8005da2:	4853      	ldr	r0, [pc, #332]	; (8005ef0 <_printf_i+0x23c>)
 8005da4:	2f6f      	cmp	r7, #111	; 0x6f
 8005da6:	bf0c      	ite	eq
 8005da8:	2308      	moveq	r3, #8
 8005daa:	230a      	movne	r3, #10
 8005dac:	2100      	movs	r1, #0
 8005dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005db2:	6865      	ldr	r5, [r4, #4]
 8005db4:	60a5      	str	r5, [r4, #8]
 8005db6:	2d00      	cmp	r5, #0
 8005db8:	bfa2      	ittt	ge
 8005dba:	6821      	ldrge	r1, [r4, #0]
 8005dbc:	f021 0104 	bicge.w	r1, r1, #4
 8005dc0:	6021      	strge	r1, [r4, #0]
 8005dc2:	b90e      	cbnz	r6, 8005dc8 <_printf_i+0x114>
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d04b      	beq.n	8005e60 <_printf_i+0x1ac>
 8005dc8:	4615      	mov	r5, r2
 8005dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dce:	fb03 6711 	mls	r7, r3, r1, r6
 8005dd2:	5dc7      	ldrb	r7, [r0, r7]
 8005dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd8:	4637      	mov	r7, r6
 8005dda:	42bb      	cmp	r3, r7
 8005ddc:	460e      	mov	r6, r1
 8005dde:	d9f4      	bls.n	8005dca <_printf_i+0x116>
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d10b      	bne.n	8005dfc <_printf_i+0x148>
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	07de      	lsls	r6, r3, #31
 8005de8:	d508      	bpl.n	8005dfc <_printf_i+0x148>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	6861      	ldr	r1, [r4, #4]
 8005dee:	4299      	cmp	r1, r3
 8005df0:	bfde      	ittt	le
 8005df2:	2330      	movle	r3, #48	; 0x30
 8005df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005dfc:	1b52      	subs	r2, r2, r5
 8005dfe:	6122      	str	r2, [r4, #16]
 8005e00:	f8cd a000 	str.w	sl, [sp]
 8005e04:	464b      	mov	r3, r9
 8005e06:	aa03      	add	r2, sp, #12
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f7ff fee4 	bl	8005bd8 <_printf_common>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d14a      	bne.n	8005eaa <_printf_i+0x1f6>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e18:	b004      	add	sp, #16
 8005e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	f043 0320 	orr.w	r3, r3, #32
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	4833      	ldr	r0, [pc, #204]	; (8005ef4 <_printf_i+0x240>)
 8005e28:	2778      	movs	r7, #120	; 0x78
 8005e2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	6829      	ldr	r1, [r5, #0]
 8005e32:	061f      	lsls	r7, r3, #24
 8005e34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e38:	d402      	bmi.n	8005e40 <_printf_i+0x18c>
 8005e3a:	065f      	lsls	r7, r3, #25
 8005e3c:	bf48      	it	mi
 8005e3e:	b2b6      	uxthmi	r6, r6
 8005e40:	07df      	lsls	r7, r3, #31
 8005e42:	bf48      	it	mi
 8005e44:	f043 0320 	orrmi.w	r3, r3, #32
 8005e48:	6029      	str	r1, [r5, #0]
 8005e4a:	bf48      	it	mi
 8005e4c:	6023      	strmi	r3, [r4, #0]
 8005e4e:	b91e      	cbnz	r6, 8005e58 <_printf_i+0x1a4>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	f023 0320 	bic.w	r3, r3, #32
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	2310      	movs	r3, #16
 8005e5a:	e7a7      	b.n	8005dac <_printf_i+0xf8>
 8005e5c:	4824      	ldr	r0, [pc, #144]	; (8005ef0 <_printf_i+0x23c>)
 8005e5e:	e7e4      	b.n	8005e2a <_printf_i+0x176>
 8005e60:	4615      	mov	r5, r2
 8005e62:	e7bd      	b.n	8005de0 <_printf_i+0x12c>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	6826      	ldr	r6, [r4, #0]
 8005e68:	6961      	ldr	r1, [r4, #20]
 8005e6a:	1d18      	adds	r0, r3, #4
 8005e6c:	6028      	str	r0, [r5, #0]
 8005e6e:	0635      	lsls	r5, r6, #24
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0x1c4>
 8005e74:	6019      	str	r1, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <_printf_i+0x1ca>
 8005e78:	0670      	lsls	r0, r6, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0x1c0>
 8005e7c:	8019      	strh	r1, [r3, #0]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	4615      	mov	r5, r2
 8005e84:	e7bc      	b.n	8005e00 <_printf_i+0x14c>
 8005e86:	682b      	ldr	r3, [r5, #0]
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	2100      	movs	r1, #0
 8005e92:	4628      	mov	r0, r5
 8005e94:	f7fa f9a4 	bl	80001e0 <memchr>
 8005e98:	b108      	cbz	r0, 8005e9e <_printf_i+0x1ea>
 8005e9a:	1b40      	subs	r0, r0, r5
 8005e9c:	6060      	str	r0, [r4, #4]
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	e7aa      	b.n	8005e00 <_printf_i+0x14c>
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	462a      	mov	r2, r5
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	47d0      	blx	sl
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0ad      	beq.n	8005e14 <_printf_i+0x160>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	d413      	bmi.n	8005ee6 <_printf_i+0x232>
 8005ebe:	68e0      	ldr	r0, [r4, #12]
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	bfb8      	it	lt
 8005ec6:	4618      	movlt	r0, r3
 8005ec8:	e7a6      	b.n	8005e18 <_printf_i+0x164>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4632      	mov	r2, r6
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	47d0      	blx	sl
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d09d      	beq.n	8005e14 <_printf_i+0x160>
 8005ed8:	3501      	adds	r5, #1
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	9903      	ldr	r1, [sp, #12]
 8005ede:	1a5b      	subs	r3, r3, r1
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	dcf2      	bgt.n	8005eca <_printf_i+0x216>
 8005ee4:	e7eb      	b.n	8005ebe <_printf_i+0x20a>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	f104 0619 	add.w	r6, r4, #25
 8005eec:	e7f5      	b.n	8005eda <_printf_i+0x226>
 8005eee:	bf00      	nop
 8005ef0:	08006192 	.word	0x08006192
 8005ef4:	080061a3 	.word	0x080061a3

08005ef8 <__malloc_lock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__malloc_lock+0x8>)
 8005efa:	f7ff bc5d 	b.w	80057b8 <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	200130b0 	.word	0x200130b0

08005f04 <__malloc_unlock>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__malloc_unlock+0x8>)
 8005f06:	f7ff bc58 	b.w	80057ba <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	200130b0 	.word	0x200130b0

08005f10 <_realloc_r>:
 8005f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f14:	4680      	mov	r8, r0
 8005f16:	4614      	mov	r4, r2
 8005f18:	460e      	mov	r6, r1
 8005f1a:	b921      	cbnz	r1, 8005f26 <_realloc_r+0x16>
 8005f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	4611      	mov	r1, r2
 8005f22:	f7ff bdd9 	b.w	8005ad8 <_malloc_r>
 8005f26:	b92a      	cbnz	r2, 8005f34 <_realloc_r+0x24>
 8005f28:	f000 f84c 	bl	8005fc4 <_free_r>
 8005f2c:	4625      	mov	r5, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f34:	f000 f892 	bl	800605c <_malloc_usable_size_r>
 8005f38:	4284      	cmp	r4, r0
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	d802      	bhi.n	8005f44 <_realloc_r+0x34>
 8005f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f42:	d812      	bhi.n	8005f6a <_realloc_r+0x5a>
 8005f44:	4621      	mov	r1, r4
 8005f46:	4640      	mov	r0, r8
 8005f48:	f7ff fdc6 	bl	8005ad8 <_malloc_r>
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d0ed      	beq.n	8005f2e <_realloc_r+0x1e>
 8005f52:	42bc      	cmp	r4, r7
 8005f54:	4622      	mov	r2, r4
 8005f56:	4631      	mov	r1, r6
 8005f58:	bf28      	it	cs
 8005f5a:	463a      	movcs	r2, r7
 8005f5c:	f7ff fc2e 	bl	80057bc <memcpy>
 8005f60:	4631      	mov	r1, r6
 8005f62:	4640      	mov	r0, r8
 8005f64:	f000 f82e 	bl	8005fc4 <_free_r>
 8005f68:	e7e1      	b.n	8005f2e <_realloc_r+0x1e>
 8005f6a:	4635      	mov	r5, r6
 8005f6c:	e7df      	b.n	8005f2e <_realloc_r+0x1e>

08005f6e <memmove>:
 8005f6e:	4288      	cmp	r0, r1
 8005f70:	b510      	push	{r4, lr}
 8005f72:	eb01 0402 	add.w	r4, r1, r2
 8005f76:	d902      	bls.n	8005f7e <memmove+0x10>
 8005f78:	4284      	cmp	r4, r0
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	d807      	bhi.n	8005f8e <memmove+0x20>
 8005f7e:	1e43      	subs	r3, r0, #1
 8005f80:	42a1      	cmp	r1, r4
 8005f82:	d008      	beq.n	8005f96 <memmove+0x28>
 8005f84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f8c:	e7f8      	b.n	8005f80 <memmove+0x12>
 8005f8e:	4402      	add	r2, r0
 8005f90:	4601      	mov	r1, r0
 8005f92:	428a      	cmp	r2, r1
 8005f94:	d100      	bne.n	8005f98 <memmove+0x2a>
 8005f96:	bd10      	pop	{r4, pc}
 8005f98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f9c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fa0:	e7f7      	b.n	8005f92 <memmove+0x24>
	...

08005fa4 <_sbrk_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	; (8005fc0 <_sbrk_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fa fe92 	bl	8000cd8 <_sbrk>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_sbrk_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_sbrk_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	200130bc 	.word	0x200130bc

08005fc4 <_free_r>:
 8005fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	d044      	beq.n	8006054 <_free_r+0x90>
 8005fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fce:	9001      	str	r0, [sp, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd6:	bfb8      	it	lt
 8005fd8:	18e4      	addlt	r4, r4, r3
 8005fda:	f7ff ff8d 	bl	8005ef8 <__malloc_lock>
 8005fde:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <_free_r+0x94>)
 8005fe0:	9801      	ldr	r0, [sp, #4]
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	b933      	cbnz	r3, 8005ff4 <_free_r+0x30>
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	6014      	str	r4, [r2, #0]
 8005fea:	b003      	add	sp, #12
 8005fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ff0:	f7ff bf88 	b.w	8005f04 <__malloc_unlock>
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	d908      	bls.n	800600a <_free_r+0x46>
 8005ff8:	6825      	ldr	r5, [r4, #0]
 8005ffa:	1961      	adds	r1, r4, r5
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	bf01      	itttt	eq
 8006000:	6819      	ldreq	r1, [r3, #0]
 8006002:	685b      	ldreq	r3, [r3, #4]
 8006004:	1949      	addeq	r1, r1, r5
 8006006:	6021      	streq	r1, [r4, #0]
 8006008:	e7ed      	b.n	8005fe6 <_free_r+0x22>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x50>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x46>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1855      	adds	r5, r2, r1
 8006018:	42a5      	cmp	r5, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x70>
 800601c:	6824      	ldr	r4, [r4, #0]
 800601e:	4421      	add	r1, r4
 8006020:	1854      	adds	r4, r2, r1
 8006022:	42a3      	cmp	r3, r4
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1e0      	bne.n	8005fea <_free_r+0x26>
 8006028:	681c      	ldr	r4, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6053      	str	r3, [r2, #4]
 800602e:	440c      	add	r4, r1
 8006030:	6014      	str	r4, [r2, #0]
 8006032:	e7da      	b.n	8005fea <_free_r+0x26>
 8006034:	d902      	bls.n	800603c <_free_r+0x78>
 8006036:	230c      	movs	r3, #12
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	e7d6      	b.n	8005fea <_free_r+0x26>
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	1961      	adds	r1, r4, r5
 8006040:	428b      	cmp	r3, r1
 8006042:	bf04      	itt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	bf04      	itt	eq
 800604c:	1949      	addeq	r1, r1, r5
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	6054      	str	r4, [r2, #4]
 8006052:	e7ca      	b.n	8005fea <_free_r+0x26>
 8006054:	b003      	add	sp, #12
 8006056:	bd30      	pop	{r4, r5, pc}
 8006058:	200130b4 	.word	0x200130b4

0800605c <_malloc_usable_size_r>:
 800605c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006060:	1f18      	subs	r0, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	bfbc      	itt	lt
 8006066:	580b      	ldrlt	r3, [r1, r0]
 8006068:	18c0      	addlt	r0, r0, r3
 800606a:	4770      	bx	lr

0800606c <_init>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr

08006078 <_fini>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr
